//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/antonio/source/repos/Packer/Packer2.Library/Report/Queries/Parser/pbiqParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Packer2 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class pbiqParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FROM=1, AS=2, IN=3, WITH=4, NATIVEREFERENCENAME=5, DOT=6, AND=7, OR=8, 
		WHERE=9, ORDERBY=10, GROUPBY=11, COLON=12, ASCENDING=13, SCALARKEY=14, 
		INCLUDEMINGROUPINGINTERVAL=15, DESCENDING=16, SELECT=17, SKIP_=18, TOP=19, 
		SCOPE=20, SCOPEDEVAL=21, FILTEREDEVAL=22, USING=23, ANYVALUE=24, VARIATION=25, 
		DEFAULTVALUEOVERRIDESANCESTORS=26, SPARKLINEDATA=27, TRANSFORM=28, VIA=29, 
		NULL=30, TRUE=31, FALSE=32, BETWEEN=33, CONTAINS=34, HIERARCHY=35, LEVEL=36, 
		AS_=37, DEFAULTVALUE=38, INPUTPARAMETERS=39, INPUTTABLE=40, OUTPUTTABLE=41, 
		TRANSFORMOUTPUTROLE=42, ROLE=43, INTEGER=44, DECIMAL=45, INTEGER_LITERAL=46, 
		DOUBLE_LITERAL=47, DECIMAL_LITERAL=48, DATE=49, DATETIME=50, BASE64BYTES_LITERAL=51, 
		DATEIME_LITERAL=52, STARTSWITH=53, ENDSWITH=54, LPAREN=55, RPAREN=56, 
		LCURLY=57, RCURLY=58, COMMA=59, GT=60, GTE=61, LT=62, LTE=63, EQ=64, STRING_LITERAL=65, 
		IDENTIFIER=66, QUOTED_IDENTIFIER=67, PLUS=68, MINUS=69, MULT=70, DIV=71, 
		WS=72;
	public const int
		RULE_queryRoot = 0, RULE_expressionRoot = 1, RULE_query = 2, RULE_from = 3, 
		RULE_fromElement = 4, RULE_entity_name = 5, RULE_schema = 6, RULE_expressionContainer = 7, 
		RULE_alias = 8, RULE_where = 9, RULE_whereCriterion = 10, RULE_transform = 11, 
		RULE_transform_parameters = 12, RULE_transform_parameter = 13, RULE_transform_inputTable = 14, 
		RULE_transform_outputTable = 15, RULE_transform_tableColumn = 16, RULE_transform_algorithm = 17, 
		RULE_orderby = 18, RULE_orderingCriterion = 19, RULE_direction = 20, RULE_groupby = 21, 
		RULE_skip = 22, RULE_top = 23, RULE_select = 24, RULE_expression = 25, 
		RULE_containsExpr = 26, RULE_betweenExpr = 27, RULE_inExpr = 28, RULE_compareExpr = 29, 
		RULE_binaryStringExpr = 30, RULE_binary_string_operator = 31, RULE_indexer = 32, 
		RULE_primary_expression = 33, RULE_propertyExpression = 34, RULE_subQueryExpr = 35, 
		RULE_sourceRefExpr = 36, RULE_funcExpr = 37, RULE_arg = 38, RULE_number = 39, 
		RULE_anyValueExpr = 40, RULE_hierarchySource = 41, RULE_hierarchyExpr = 42, 
		RULE_hierarchyLevelExpr = 43, RULE_variationExpr = 44, RULE_datetimeSecExpr = 45, 
		RULE_scopedEvalExpr = 46, RULE_filteredEvalExpr = 47, RULE_sparkLineDataExpr = 48, 
		RULE_sparkLineDataMeasure = 49, RULE_scalarKey = 50, RULE_encodedLiteralExpr = 51, 
		RULE_inExprValues = 52, RULE_inExprEqualityKind = 53, RULE_expressionOrExpressionList = 54, 
		RULE_arithmenticExpr = 55, RULE_logicalExpr = 56, RULE_transformOutputRoleRefExpr = 57, 
		RULE_binary_arithmetic_operator = 58, RULE_binary_logic_operator = 59, 
		RULE_amount = 60, RULE_timeunit = 61, RULE_defaultValueExpr = 62, RULE_timeUnit = 63, 
		RULE_left = 64, RULE_right = 65, RULE_comparisonOperator = 66, RULE_identifier = 67;
	public static readonly string[] ruleNames = {
		"queryRoot", "expressionRoot", "query", "from", "fromElement", "entity_name", 
		"schema", "expressionContainer", "alias", "where", "whereCriterion", "transform", 
		"transform_parameters", "transform_parameter", "transform_inputTable", 
		"transform_outputTable", "transform_tableColumn", "transform_algorithm", 
		"orderby", "orderingCriterion", "direction", "groupby", "skip", "top", 
		"select", "expression", "containsExpr", "betweenExpr", "inExpr", "compareExpr", 
		"binaryStringExpr", "binary_string_operator", "indexer", "primary_expression", 
		"propertyExpression", "subQueryExpr", "sourceRefExpr", "funcExpr", "arg", 
		"number", "anyValueExpr", "hierarchySource", "hierarchyExpr", "hierarchyLevelExpr", 
		"variationExpr", "datetimeSecExpr", "scopedEvalExpr", "filteredEvalExpr", 
		"sparkLineDataExpr", "sparkLineDataMeasure", "scalarKey", "encodedLiteralExpr", 
		"inExprValues", "inExprEqualityKind", "expressionOrExpressionList", "arithmenticExpr", 
		"logicalExpr", "transformOutputRoleRefExpr", "binary_arithmetic_operator", 
		"binary_logic_operator", "amount", "timeunit", "defaultValueExpr", "timeUnit", 
		"left", "right", "comparisonOperator", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"':'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"','", "'>'", "'>='", "'<'", "'<='", "'='", null, null, null, "'+'", "'-'", 
		"'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FROM", "AS", "IN", "WITH", "NATIVEREFERENCENAME", "DOT", "AND", 
		"OR", "WHERE", "ORDERBY", "GROUPBY", "COLON", "ASCENDING", "SCALARKEY", 
		"INCLUDEMINGROUPINGINTERVAL", "DESCENDING", "SELECT", "SKIP_", "TOP", 
		"SCOPE", "SCOPEDEVAL", "FILTEREDEVAL", "USING", "ANYVALUE", "VARIATION", 
		"DEFAULTVALUEOVERRIDESANCESTORS", "SPARKLINEDATA", "TRANSFORM", "VIA", 
		"NULL", "TRUE", "FALSE", "BETWEEN", "CONTAINS", "HIERARCHY", "LEVEL", 
		"AS_", "DEFAULTVALUE", "INPUTPARAMETERS", "INPUTTABLE", "OUTPUTTABLE", 
		"TRANSFORMOUTPUTROLE", "ROLE", "INTEGER", "DECIMAL", "INTEGER_LITERAL", 
		"DOUBLE_LITERAL", "DECIMAL_LITERAL", "DATE", "DATETIME", "BASE64BYTES_LITERAL", 
		"DATEIME_LITERAL", "STARTSWITH", "ENDSWITH", "LPAREN", "RPAREN", "LCURLY", 
		"RCURLY", "COMMA", "GT", "GTE", "LT", "LTE", "EQ", "STRING_LITERAL", "IDENTIFIER", 
		"QUOTED_IDENTIFIER", "PLUS", "MINUS", "MULT", "DIV", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pbiqParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static pbiqParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pbiqParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pbiqParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pbiqParser.Eof, 0); }
		public QueryRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryRootContext queryRoot() {
		QueryRootContext _localctx = new QueryRootContext(Context, State);
		EnterRule(_localctx, 0, RULE_queryRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			query();
			State = 137;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pbiqParser.Eof, 0); }
		public ExpressionRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRootContext expressionRoot() {
		ExpressionRootContext _localctx = new ExpressionRootContext(Context, State);
		EnterRule(_localctx, 2, RULE_expressionRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			expression();
			State = 140;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext[] transform() {
			return GetRuleContexts<TransformContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext transform(int i) {
			return GetRuleContext<TransformContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipContext skip() {
			return GetRuleContext<SkipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			from();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 143;
				where();
				}
			}

			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TRANSFORM) {
				{
				{
				State = 146;
				transform();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDERBY) {
				{
				State = 152;
				orderby();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELECT) {
				{
				State = 155;
				select();
				}
			}

			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUPBY) {
				{
				State = 158;
				groupby();
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_) {
				{
				State = 161;
				skip();
				}
			}

			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 164;
				top();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(pbiqParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromElementContext[] fromElement() {
			return GetRuleContexts<FromElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromElementContext fromElement(int i) {
			return GetRuleContext<FromElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(Context, State);
		EnterRule(_localctx, 6, RULE_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(FROM);
			State = 168;
			fromElement();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 169;
				Match(COMMA);
				State = 170;
				fromElement();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pbiqParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public FromElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromElementContext fromElement() {
		FromElementContext _localctx = new FromElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_fromElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			alias();
			State = 177;
			Match(IN);
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIATION:
			case LEVEL:
			case IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 178;
				entity_name();
				}
				break;
			case LCURLY:
				{
				State = 179;
				subQueryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaContext schema() {
			return GetRuleContext<SchemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 182;
				schema();
				State = 183;
				Match(DOT);
				}
				break;
			}
			State = 187;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 12, RULE_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVEREFERENCENAME() { return GetToken(pbiqParser.NATIVEREFERENCENAME, 0); }
		public ExpressionContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionContainer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContainerContext expressionContainer() {
		ExpressionContainerContext _localctx = new ExpressionContainerContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionContainer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			expression();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 192;
				Match(AS);
				State = 193;
				alias();
				}
			}

			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 196;
				Match(WITH);
				State = 197;
				Match(NATIVEREFERENCENAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(pbiqParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext[] whereCriterion() {
			return GetRuleContexts<WhereCriterionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext whereCriterion(int i) {
			return GetRuleContext<WhereCriterionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 18, RULE_where);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(WHERE);
			State = 203;
			whereCriterion();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 204;
				Match(COMMA);
				State = 205;
				whereCriterion();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereCriterionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereCriterionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereCriterion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereCriterion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereCriterionContext whereCriterion() {
		WhereCriterionContext _localctx = new WhereCriterionContext(Context, State);
		EnterRule(_localctx, 20, RULE_whereCriterion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(pbiqParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(pbiqParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_algorithmContext transform_algorithm() {
			return GetRuleContext<Transform_algorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_parametersContext transform_parameters() {
			return GetRuleContext<Transform_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_inputTableContext transform_inputTable() {
			return GetRuleContext<Transform_inputTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_outputTableContext transform_outputTable() {
			return GetRuleContext<Transform_outputTableContext>(0);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 22, RULE_transform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(TRANSFORM);
			State = 214;
			Match(VIA);
			State = 215;
			transform_algorithm();
			State = 216;
			Match(AS);
			State = 217;
			identifier();
			State = 218;
			Match(WITH);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INPUTPARAMETERS) {
				{
				State = 219;
				transform_parameters();
				}
			}

			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 222;
				Match(COMMA);
				}
				break;
			}
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INPUTTABLE) {
				{
				State = 225;
				transform_inputTable();
				}
			}

			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 228;
				Match(COMMA);
				}
			}

			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUTTABLE) {
				{
				State = 231;
				transform_outputTable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUTPARAMETERS() { return GetToken(pbiqParser.INPUTPARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_parameterContext[] transform_parameter() {
			return GetRuleContexts<Transform_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_parameterContext transform_parameter(int i) {
			return GetRuleContext<Transform_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public Transform_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_parametersContext transform_parameters() {
		Transform_parametersContext _localctx = new Transform_parametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_transform_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(INPUTPARAMETERS);
			State = 235;
			Match(LPAREN);
			State = 236;
			transform_parameter();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 237;
				Match(COMMA);
				State = 238;
				transform_parameter();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public Transform_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_parameterContext transform_parameter() {
		Transform_parameterContext _localctx = new Transform_parameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_transform_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			expression();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 247;
				Match(AS);
				State = 248;
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_inputTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUTTABLE() { return GetToken(pbiqParser.INPUTTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext[] transform_tableColumn() {
			return GetRuleContexts<Transform_tableColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext transform_tableColumn(int i) {
			return GetRuleContext<Transform_tableColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public Transform_inputTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_inputTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_inputTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_inputTableContext transform_inputTable() {
		Transform_inputTableContext _localctx = new Transform_inputTableContext(Context, State);
		EnterRule(_localctx, 28, RULE_transform_inputTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(INPUTTABLE);
			State = 252;
			Match(LPAREN);
			State = 253;
			transform_tableColumn();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 254;
				Match(COMMA);
				State = 255;
				transform_tableColumn();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(RPAREN);
			State = 262;
			Match(AS);
			State = 263;
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_outputTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUTTABLE() { return GetToken(pbiqParser.OUTPUTTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext[] transform_tableColumn() {
			return GetRuleContexts<Transform_tableColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext transform_tableColumn(int i) {
			return GetRuleContext<Transform_tableColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public Transform_outputTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_outputTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_outputTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_outputTableContext transform_outputTable() {
		Transform_outputTableContext _localctx = new Transform_outputTableContext(Context, State);
		EnterRule(_localctx, 30, RULE_transform_outputTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(OUTPUTTABLE);
			State = 266;
			Match(LPAREN);
			State = 267;
			transform_tableColumn();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 268;
				Match(COMMA);
				State = 269;
				transform_tableColumn();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275;
			Match(RPAREN);
			State = 276;
			Match(AS);
			State = 277;
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_tableColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(pbiqParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		public Transform_tableColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_tableColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_tableColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_tableColumnContext transform_tableColumn() {
		Transform_tableColumnContext _localctx = new Transform_tableColumnContext(Context, State);
		EnterRule(_localctx, 32, RULE_transform_tableColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 280;
				Match(AS);
				State = 281;
				alias();
				}
			}

			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 284;
				Match(WITH);
				State = 285;
				Match(ROLE);
				State = 286;
				Match(STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_algorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		public Transform_algorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_algorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_algorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_algorithmContext transform_algorithm() {
		Transform_algorithmContext _localctx = new Transform_algorithmContext(Context, State);
		EnterRule(_localctx, 34, RULE_transform_algorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(pbiqParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderingCriterionContext[] orderingCriterion() {
			return GetRuleContexts<OrderingCriterionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderingCriterionContext orderingCriterion(int i) {
			return GetRuleContext<OrderingCriterionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 36, RULE_orderby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(ORDERBY);
			State = 292;
			orderingCriterion();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 293;
				Match(COMMA);
				State = 294;
				orderingCriterion();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingCriterionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderingCriterionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderingCriterion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderingCriterion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingCriterionContext orderingCriterion() {
		OrderingCriterionContext _localctx = new OrderingCriterionContext(Context, State);
		EnterRule(_localctx, 38, RULE_orderingCriterion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			expression();
			State = 301;
			direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(pbiqParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(pbiqParser.DESCENDING, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 40, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = TokenStream.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPBY() { return GetToken(pbiqParser.GROUPBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 42, RULE_groupby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(GROUPBY);
			State = 306;
			expression();
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 307;
				Match(COMMA);
				State = 308;
				expression();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(pbiqParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 44, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(SKIP_);
			State = 315;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(pbiqParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 46, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(TOP);
			State = 318;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(pbiqParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 48, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(SELECT);
			State = 321;
			expression();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 322;
				Match(COMMA);
				State = 323;
				expression();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsExprContext containsExpr() {
			return GetRuleContext<ContainsExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BetweenExprContext betweenExpr() {
			return GetRuleContext<BetweenExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InExprContext inExpr() {
			return GetRuleContext<InExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareExprContext compareExpr() {
			return GetRuleContext<CompareExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryStringExprContext binaryStringExpr() {
			return GetRuleContext<BinaryStringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerContext indexer() {
			return GetRuleContext<IndexerContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				containsExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				betweenExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				inExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 333;
				compareExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 334;
				binaryStringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 335;
				indexer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pbiqParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public ContainsExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsExprContext containsExpr() {
		ContainsExprContext _localctx = new ContainsExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_containsExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			primary_expression();
			State = 339;
			Match(CONTAINS);
			State = 340;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BetweenExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(pbiqParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pbiqParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public BetweenExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_betweenExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BetweenExprContext betweenExpr() {
		BetweenExprContext _localctx = new BetweenExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_betweenExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			primary_expression();
			State = 343;
			Match(BETWEEN);
			State = 344;
			left();
			State = 345;
			Match(AND);
			State = 346;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pbiqParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InExprValuesContext inExprValues() {
			return GetRuleContext<InExprValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public InExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprContext inExpr() {
		InExprContext _localctx = new InExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_inExpr);
		int _la;
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				primary_expression();
				State = 349;
				Match(IN);
				State = 352;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIATION:
				case LEVEL:
				case IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 350;
					sourceRefExpr();
					}
					break;
				case LPAREN:
					{
					State = 351;
					inExprValues();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354;
				Match(LPAREN);
				State = 355;
				expression();
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 356;
					Match(COMMA);
					State = 357;
					expression();
					}
					}
					State = 362;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 363;
				Match(RPAREN);
				State = 364;
				Match(IN);
				State = 367;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIATION:
				case LEVEL:
				case IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 365;
					sourceRefExpr();
					}
					break;
				case LPAREN:
					{
					State = 366;
					inExprValues();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public CompareExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExprContext compareExpr() {
		CompareExprContext _localctx = new CompareExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_compareExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			primary_expression();
			State = 372;
			comparisonOperator();
			State = 373;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryStringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_string_operatorContext binary_string_operator() {
			return GetRuleContext<Binary_string_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public BinaryStringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryStringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryStringExprContext binaryStringExpr() {
		BinaryStringExprContext _localctx = new BinaryStringExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_binaryStringExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			primary_expression();
			State = 376;
			binary_string_operator();
			State = 377;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_string_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(pbiqParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(pbiqParser.ENDSWITH, 0); }
		public Binary_string_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_string_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_string_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_string_operatorContext binary_string_operator() {
		Binary_string_operatorContext _localctx = new Binary_string_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_binary_string_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTSWITH || _la==ENDSWITH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(pbiqParser.QUOTED_IDENTIFIER, 0); }
		public IndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexerContext indexer() {
		IndexerContext _localctx = new IndexerContext(Context, State);
		EnterRule(_localctx, 64, RULE_indexer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			Match(IDENTIFIER);
			State = 382;
			Match(QUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncExprContext funcExpr() {
			return GetRuleContext<FuncExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariationExprContext variationExpr() {
			return GetRuleContext<VariationExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyValueExprContext anyValueExpr() {
			return GetRuleContext<AnyValueExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmenticExprContext arithmenticExpr() {
			return GetRuleContext<ArithmenticExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeSecExprContext datetimeSecExpr() {
			return GetRuleContext<DatetimeSecExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodedLiteralExprContext encodedLiteralExpr() {
			return GetRuleContext<EncodedLiteralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HierarchyExprContext hierarchyExpr() {
			return GetRuleContext<HierarchyExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HierarchyLevelExprContext hierarchyLevelExpr() {
			return GetRuleContext<HierarchyLevelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformOutputRoleRefExprContext transformOutputRoleRefExpr() {
			return GetRuleContext<TransformOutputRoleRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression() {
			return GetRuleContext<PropertyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopedEvalExprContext scopedEvalExpr() {
			return GetRuleContext<ScopedEvalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilteredEvalExprContext filteredEvalExpr() {
			return GetRuleContext<FilteredEvalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SparkLineDataExprContext sparkLineDataExpr() {
			return GetRuleContext<SparkLineDataExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueExprContext defaultValueExpr() {
			return GetRuleContext<DefaultValueExprContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_primary_expression);
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				Match(LPAREN);
				State = 385;
				expression();
				State = 386;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				funcExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				variationExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390;
				anyValueExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 391;
				arithmenticExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 392;
				datetimeSecExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 393;
				encodedLiteralExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 394;
				hierarchyExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 395;
				hierarchyLevelExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 396;
				logicalExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 397;
				transformOutputRoleRefExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 398;
				propertyExpression();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 399;
				scopedEvalExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 400;
				filteredEvalExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 401;
				sparkLineDataExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 402;
				sourceRefExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 403;
				subQueryExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 404;
				defaultValueExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionContext propertyExpression() {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_propertyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIATION:
			case LEVEL:
			case IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 407;
				sourceRefExpr();
				}
				break;
			case LCURLY:
				{
				State = 408;
				subQueryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 411;
			Match(DOT);
			State = 412;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubQueryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(pbiqParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(pbiqParser.RCURLY, 0); }
		public SubQueryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subQueryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQueryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubQueryExprContext subQueryExpr() {
		SubQueryExprContext _localctx = new SubQueryExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_subQueryExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(LCURLY);
			State = 415;
			query();
			State = 416;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceRefExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SourceRefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceRefExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceRefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceRefExprContext sourceRefExpr() {
		SourceRefExprContext _localctx = new SourceRefExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_sourceRefExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncExprContext funcExpr() {
		FuncExprContext _localctx = new FuncExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_funcExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			identifier();
			State = 421;
			Match(LPAREN);
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 123235222064731L) != 0)) {
				{
				State = 422;
				arg();
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 423;
					Match(COMMA);
					State = 424;
					arg();
					}
					}
					State = 429;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 432;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 76, RULE_arg);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(pbiqParser.DECIMAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 78, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyValueExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANYVALUE() { return GetToken(pbiqParser.ANYVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTVALUEOVERRIDESANCESTORS() { return GetToken(pbiqParser.DEFAULTVALUEOVERRIDESANCESTORS, 0); }
		public AnyValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyValueExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyValueExprContext anyValueExpr() {
		AnyValueExprContext _localctx = new AnyValueExprContext(Context, State);
		EnterRule(_localctx, 80, RULE_anyValueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			Match(ANYVALUE);
			State = 442;
			Match(WITH);
			State = 443;
			Match(DEFAULTVALUEOVERRIDESANCESTORS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchySourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariationExprContext variationExpr() {
			return GetRuleContext<VariationExprContext>(0);
		}
		public HierarchySourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchySource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchySource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchySourceContext hierarchySource() {
		HierarchySourceContext _localctx = new HierarchySourceContext(Context, State);
		EnterRule(_localctx, 82, RULE_hierarchySource);
		try {
			State = 447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				sourceRefExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 446;
				variationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchyExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HierarchySourceContext hierarchySource() {
			return GetRuleContext<HierarchySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIERARCHY() { return GetToken(pbiqParser.HIERARCHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public HierarchyExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchyExprContext hierarchyExpr() {
		HierarchyExprContext _localctx = new HierarchyExprContext(Context, State);
		EnterRule(_localctx, 84, RULE_hierarchyExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			hierarchySource();
			State = 450;
			Match(DOT);
			State = 451;
			Match(HIERARCHY);
			State = 452;
			Match(LPAREN);
			State = 453;
			identifier();
			State = 454;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchyLevelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HierarchyExprContext hierarchyExpr() {
			return GetRuleContext<HierarchyExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(pbiqParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public HierarchyLevelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyLevelExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchyLevelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchyLevelExprContext hierarchyLevelExpr() {
		HierarchyLevelExprContext _localctx = new HierarchyLevelExprContext(Context, State);
		EnterRule(_localctx, 86, RULE_hierarchyLevelExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			hierarchyExpr();
			State = 457;
			Match(DOT);
			State = 458;
			Match(LEVEL);
			State = 459;
			Match(LPAREN);
			State = 460;
			identifier();
			State = 461;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariationExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIATION() { return GetToken(pbiqParser.VARIATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(pbiqParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public VariationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variationExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariationExprContext variationExpr() {
		VariationExprContext _localctx = new VariationExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_variationExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			sourceRefExpr();
			State = 464;
			Match(DOT);
			State = 465;
			Match(VARIATION);
			State = 466;
			Match(LPAREN);
			State = 467;
			identifier();
			State = 468;
			Match(COMMA);
			State = 469;
			identifier();
			State = 470;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeSecExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(pbiqParser.DATETIME, 0); }
		public DatetimeSecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetimeSecExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetimeSecExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeSecExprContext datetimeSecExpr() {
		DatetimeSecExprContext _localctx = new DatetimeSecExprContext(Context, State);
		EnterRule(_localctx, 90, RULE_datetimeSecExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(DATETIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopedEvalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPEDEVAL() { return GetToken(pbiqParser.SCOPEDEVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(pbiqParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(pbiqParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(pbiqParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(pbiqParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(pbiqParser.RPAREN, i);
		}
		public ScopedEvalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopedEvalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedEvalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopedEvalExprContext scopedEvalExpr() {
		ScopedEvalExprContext _localctx = new ScopedEvalExprContext(Context, State);
		EnterRule(_localctx, 92, RULE_scopedEvalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(SCOPEDEVAL);
			State = 475;
			Match(LPAREN);
			State = 476;
			expression();
			State = 477;
			Match(COMMA);
			State = 478;
			Match(SCOPE);
			State = 479;
			Match(LPAREN);
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 123235196898907L) != 0)) {
				{
				State = 480;
				expression();
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 481;
					Match(COMMA);
					State = 482;
					expression();
					}
					}
					State = 487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 490;
			Match(RPAREN);
			State = 491;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredEvalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTEREDEVAL() { return GetToken(pbiqParser.FILTEREDEVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(pbiqParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(pbiqParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(pbiqParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(pbiqParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext[] whereCriterion() {
			return GetRuleContexts<WhereCriterionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext whereCriterion(int i) {
			return GetRuleContext<WhereCriterionContext>(i);
		}
		public FilteredEvalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredEvalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredEvalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredEvalExprContext filteredEvalExpr() {
		FilteredEvalExprContext _localctx = new FilteredEvalExprContext(Context, State);
		EnterRule(_localctx, 94, RULE_filteredEvalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			Match(FILTEREDEVAL);
			State = 494;
			Match(LPAREN);
			State = 495;
			expression();
			State = 496;
			Match(COMMA);
			State = 497;
			Match(LPAREN);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 123235196898907L) != 0)) {
				{
				State = 498;
				whereCriterion();
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 499;
					Match(COMMA);
					State = 500;
					whereCriterion();
					}
					}
					State = 505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 508;
			Match(RPAREN);
			State = 509;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparkLineDataExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPARKLINEDATA() { return GetToken(pbiqParser.SPARKLINEDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(pbiqParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(pbiqParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SparkLineDataMeasureContext sparkLineDataMeasure() {
			return GetRuleContext<SparkLineDataMeasureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPBY() { return GetToken(pbiqParser.GROUPBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(pbiqParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(pbiqParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(pbiqParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(pbiqParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALARKEY() { return GetToken(pbiqParser.SCALARKEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarKeyContext scalarKey() {
			return GetRuleContext<ScalarKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDEMINGROUPINGINTERVAL() { return GetToken(pbiqParser.INCLUDEMINGROUPINGINTERVAL, 0); }
		public SparkLineDataExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparkLineDataExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparkLineDataExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparkLineDataExprContext sparkLineDataExpr() {
		SparkLineDataExprContext _localctx = new SparkLineDataExprContext(Context, State);
		EnterRule(_localctx, 96, RULE_sparkLineDataExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(SPARKLINEDATA);
			State = 512;
			Match(LPAREN);
			State = 513;
			sparkLineDataMeasure();
			State = 514;
			Match(COMMA);
			State = 515;
			Match(GROUPBY);
			State = 516;
			Match(COLON);
			State = 517;
			Match(LPAREN);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 123235196898907L) != 0)) {
				{
				State = 518;
				expression();
				State = 523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 519;
					Match(COMMA);
					State = 520;
					expression();
					}
					}
					State = 525;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 528;
			Match(RPAREN);
			State = 529;
			Match(COMMA);
			State = 530;
			Match(INTEGER);
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 531;
				Match(COMMA);
				State = 532;
				Match(SCALARKEY);
				State = 533;
				Match(COLON);
				State = 534;
				scalarKey();
				}
				break;
			}
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 537;
				Match(COMMA);
				State = 538;
				Match(INCLUDEMINGROUPINGINTERVAL);
				}
			}

			State = 541;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparkLineDataMeasureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SparkLineDataMeasureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparkLineDataMeasure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparkLineDataMeasure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparkLineDataMeasureContext sparkLineDataMeasure() {
		SparkLineDataMeasureContext _localctx = new SparkLineDataMeasureContext(Context, State);
		EnterRule(_localctx, 98, RULE_sparkLineDataMeasure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScalarKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarKeyContext scalarKey() {
		ScalarKeyContext _localctx = new ScalarKeyContext(Context, State);
		EnterRule(_localctx, 100, RULE_scalarKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodedLiteralExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(pbiqParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(pbiqParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_LITERAL() { return GetToken(pbiqParser.DOUBLE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE64BYTES_LITERAL() { return GetToken(pbiqParser.BASE64BYTES_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEIME_LITERAL() { return GetToken(pbiqParser.DATEIME_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(pbiqParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(pbiqParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(pbiqParser.NULL, 0); }
		public EncodedLiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodedLiteralExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodedLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodedLiteralExprContext encodedLiteralExpr() {
		EncodedLiteralExprContext _localctx = new EncodedLiteralExprContext(Context, State);
		EnterRule(_localctx, 102, RULE_encodedLiteralExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 34366488583L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrExpressionListContext[] expressionOrExpressionList() {
			return GetRuleContexts<ExpressionOrExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrExpressionListContext expressionOrExpressionList(int i) {
			return GetRuleContext<ExpressionOrExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(pbiqParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InExprEqualityKindContext inExprEqualityKind() {
			return GetRuleContext<InExprEqualityKindContext>(0);
		}
		public InExprValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExprValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExprValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprValuesContext inExprValues() {
		InExprValuesContext _localctx = new InExprValuesContext(Context, State);
		EnterRule(_localctx, 104, RULE_inExprValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(LPAREN);
			State = 550;
			expressionOrExpressionList();
			State = 555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 551;
				Match(COMMA);
				State = 552;
				expressionOrExpressionList();
				}
				}
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 558;
			Match(RPAREN);
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 559;
				Match(USING);
				State = 560;
				inExprEqualityKind();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprEqualityKindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InExprEqualityKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExprEqualityKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExprEqualityKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprEqualityKindContext inExprEqualityKind() {
		InExprEqualityKindContext _localctx = new InExprEqualityKindContext(Context, State);
		EnterRule(_localctx, 106, RULE_inExprEqualityKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public ExpressionOrExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrExpressionListContext expressionOrExpressionList() {
		ExpressionOrExpressionListContext _localctx = new ExpressionOrExpressionListContext(Context, State);
		EnterRule(_localctx, 108, RULE_expressionOrExpressionList);
		int _la;
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 566;
				Match(LPAREN);
				State = 567;
				expression();
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 568;
					Match(COMMA);
					State = 569;
					expression();
					}
					}
					State = 572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 574;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmenticExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_arithmetic_operatorContext binary_arithmetic_operator() {
			return GetRuleContext<Binary_arithmetic_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public ArithmenticExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmenticExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmenticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmenticExprContext arithmenticExpr() {
		ArithmenticExprContext _localctx = new ArithmenticExprContext(Context, State);
		EnterRule(_localctx, 110, RULE_arithmenticExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(LPAREN);
			State = 579;
			left();
			State = 580;
			binary_arithmetic_operator();
			State = 581;
			right();
			State = 582;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_logic_operatorContext binary_logic_operator() {
			return GetRuleContext<Binary_logic_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public LogicalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExprContext logicalExpr() {
		LogicalExprContext _localctx = new LogicalExprContext(Context, State);
		EnterRule(_localctx, 112, RULE_logicalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(LPAREN);
			State = 585;
			left();
			State = 586;
			binary_logic_operator();
			State = 587;
			right();
			State = 588;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformOutputRoleRefExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORMOUTPUTROLE() { return GetToken(pbiqParser.TRANSFORMOUTPUTROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public TransformOutputRoleRefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transformOutputRoleRefExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransformOutputRoleRefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformOutputRoleRefExprContext transformOutputRoleRefExpr() {
		TransformOutputRoleRefExprContext _localctx = new TransformOutputRoleRefExprContext(Context, State);
		EnterRule(_localctx, 114, RULE_transformOutputRoleRefExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			Match(TRANSFORMOUTPUTROLE);
			State = 591;
			Match(LPAREN);
			State = 592;
			Match(STRING_LITERAL);
			State = 593;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_arithmetic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(pbiqParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(pbiqParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(pbiqParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(pbiqParser.MULT, 0); }
		public Binary_arithmetic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_arithmetic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_arithmetic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_arithmetic_operatorContext binary_arithmetic_operator() {
		Binary_arithmetic_operatorContext _localctx = new Binary_arithmetic_operatorContext(Context, State);
		EnterRule(_localctx, 116, RULE_binary_arithmetic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_logic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pbiqParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pbiqParser.OR, 0); }
		public Binary_logic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_logic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_logic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_logic_operatorContext binary_logic_operator() {
		Binary_logic_operatorContext _localctx = new Binary_logic_operatorContext(Context, State);
		EnterRule(_localctx, 118, RULE_binary_logic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 120, RULE_amount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeunitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TimeunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeunit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeunit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeunitContext timeunit() {
		TimeunitContext _localctx = new TimeunitContext(Context, State);
		EnterRule(_localctx, 122, RULE_timeunit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTVALUE() { return GetToken(pbiqParser.DEFAULTVALUE, 0); }
		public DefaultValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValueExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueExprContext defaultValueExpr() {
		DefaultValueExprContext _localctx = new DefaultValueExprContext(Context, State);
		EnterRule(_localctx, 124, RULE_defaultValueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(DEFAULTVALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public TimeUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeUnitContext timeUnit() {
		TimeUnitContext _localctx = new TimeUnitContext(Context, State);
		EnterRule(_localctx, 126, RULE_timeUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftContext left() {
		LeftContext _localctx = new LeftContext(Context, State);
		EnterRule(_localctx, 128, RULE_left);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightContext right() {
		RightContext _localctx = new RightContext(Context, State);
		EnterRule(_localctx, 130, RULE_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pbiqParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pbiqParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pbiqParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(pbiqParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(pbiqParser.LTE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & 31L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(pbiqParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(pbiqParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIATION() { return GetToken(pbiqParser.VARIATION, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 134, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & 6597069768705L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,72,616,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
		2,3,2,145,8,2,1,2,5,2,148,8,2,10,2,12,2,151,9,2,1,2,3,2,154,8,2,1,2,3,
		2,157,8,2,1,2,3,2,160,8,2,1,2,3,2,163,8,2,1,2,3,2,166,8,2,1,3,1,3,1,3,
		1,3,5,3,172,8,3,10,3,12,3,175,9,3,1,4,1,4,1,4,1,4,3,4,181,8,4,1,5,1,5,
		1,5,3,5,186,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,3,7,195,8,7,1,7,1,7,3,7,199,
		8,7,1,8,1,8,1,9,1,9,1,9,1,9,5,9,207,8,9,10,9,12,9,210,9,9,1,10,1,10,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,221,8,11,1,11,3,11,224,8,11,1,11,
		3,11,227,8,11,1,11,3,11,230,8,11,1,11,3,11,233,8,11,1,12,1,12,1,12,1,12,
		1,12,5,12,240,8,12,10,12,12,12,243,9,12,1,12,1,12,1,13,1,13,1,13,3,13,
		250,8,13,1,14,1,14,1,14,1,14,1,14,5,14,257,8,14,10,14,12,14,260,9,14,1,
		14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,5,15,271,8,15,10,15,12,15,274,
		9,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,283,8,16,1,16,1,16,1,16,3,
		16,288,8,16,1,17,1,17,1,18,1,18,1,18,1,18,5,18,296,8,18,10,18,12,18,299,
		9,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,5,21,310,8,21,10,21,
		12,21,313,9,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,
		325,8,24,10,24,12,24,328,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
		337,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
		28,1,28,3,28,353,8,28,1,28,1,28,1,28,1,28,5,28,359,8,28,10,28,12,28,362,
		9,28,1,28,1,28,1,28,1,28,3,28,368,8,28,3,28,370,8,28,1,29,1,29,1,29,1,
		29,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,3,33,406,8,33,1,34,1,34,3,34,410,8,34,1,34,1,34,1,34,1,35,
		1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,5,37,426,8,37,10,37,
		12,37,429,9,37,3,37,431,8,37,1,37,1,37,1,38,1,38,1,38,3,38,438,8,38,1,
		39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,3,41,448,8,41,1,42,1,42,1,42,1,42,
		1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
		1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,5,46,484,8,46,10,46,12,46,487,9,46,3,46,489,8,46,1,46,1,46,1,
		46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,502,8,47,10,47,12,47,505,
		9,47,3,47,507,8,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,5,48,522,8,48,10,48,12,48,525,9,48,3,48,527,8,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,3,48,536,8,48,1,48,1,48,3,48,540,8,48,1,48,1,
		48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,5,52,554,8,52,10,
		52,12,52,557,9,52,1,52,1,52,1,52,3,52,562,8,52,1,53,1,53,1,54,1,54,1,54,
		1,54,1,54,4,54,571,8,54,11,54,12,54,572,1,54,1,54,3,54,577,8,54,1,55,1,
		55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,
		57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,
		64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,0,0,68,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,0,8,2,0,13,13,16,16,
		1,0,53,54,1,0,44,45,4,0,30,32,46,48,51,52,65,65,1,0,68,71,1,0,7,8,1,0,
		60,64,3,0,25,25,36,36,66,67,619,0,136,1,0,0,0,2,139,1,0,0,0,4,142,1,0,
		0,0,6,167,1,0,0,0,8,176,1,0,0,0,10,185,1,0,0,0,12,189,1,0,0,0,14,191,1,
		0,0,0,16,200,1,0,0,0,18,202,1,0,0,0,20,211,1,0,0,0,22,213,1,0,0,0,24,234,
		1,0,0,0,26,246,1,0,0,0,28,251,1,0,0,0,30,265,1,0,0,0,32,279,1,0,0,0,34,
		289,1,0,0,0,36,291,1,0,0,0,38,300,1,0,0,0,40,303,1,0,0,0,42,305,1,0,0,
		0,44,314,1,0,0,0,46,317,1,0,0,0,48,320,1,0,0,0,50,336,1,0,0,0,52,338,1,
		0,0,0,54,342,1,0,0,0,56,369,1,0,0,0,58,371,1,0,0,0,60,375,1,0,0,0,62,379,
		1,0,0,0,64,381,1,0,0,0,66,405,1,0,0,0,68,409,1,0,0,0,70,414,1,0,0,0,72,
		418,1,0,0,0,74,420,1,0,0,0,76,437,1,0,0,0,78,439,1,0,0,0,80,441,1,0,0,
		0,82,447,1,0,0,0,84,449,1,0,0,0,86,456,1,0,0,0,88,463,1,0,0,0,90,472,1,
		0,0,0,92,474,1,0,0,0,94,493,1,0,0,0,96,511,1,0,0,0,98,543,1,0,0,0,100,
		545,1,0,0,0,102,547,1,0,0,0,104,549,1,0,0,0,106,563,1,0,0,0,108,576,1,
		0,0,0,110,578,1,0,0,0,112,584,1,0,0,0,114,590,1,0,0,0,116,595,1,0,0,0,
		118,597,1,0,0,0,120,599,1,0,0,0,122,601,1,0,0,0,124,603,1,0,0,0,126,605,
		1,0,0,0,128,607,1,0,0,0,130,609,1,0,0,0,132,611,1,0,0,0,134,613,1,0,0,
		0,136,137,3,4,2,0,137,138,5,0,0,1,138,1,1,0,0,0,139,140,3,50,25,0,140,
		141,5,0,0,1,141,3,1,0,0,0,142,144,3,6,3,0,143,145,3,18,9,0,144,143,1,0,
		0,0,144,145,1,0,0,0,145,149,1,0,0,0,146,148,3,22,11,0,147,146,1,0,0,0,
		148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,153,1,0,0,0,151,149,
		1,0,0,0,152,154,3,36,18,0,153,152,1,0,0,0,153,154,1,0,0,0,154,156,1,0,
		0,0,155,157,3,48,24,0,156,155,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,
		158,160,3,42,21,0,159,158,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,
		163,3,44,22,0,162,161,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,166,
		3,46,23,0,165,164,1,0,0,0,165,166,1,0,0,0,166,5,1,0,0,0,167,168,5,1,0,
		0,168,173,3,8,4,0,169,170,5,59,0,0,170,172,3,8,4,0,171,169,1,0,0,0,172,
		175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,7,1,0,0,0,175,173,1,0,
		0,0,176,177,3,16,8,0,177,180,5,3,0,0,178,181,3,10,5,0,179,181,3,70,35,
		0,180,178,1,0,0,0,180,179,1,0,0,0,181,9,1,0,0,0,182,183,3,12,6,0,183,184,
		5,6,0,0,184,186,1,0,0,0,185,182,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,
		0,187,188,3,134,67,0,188,11,1,0,0,0,189,190,3,134,67,0,190,13,1,0,0,0,
		191,194,3,50,25,0,192,193,5,2,0,0,193,195,3,16,8,0,194,192,1,0,0,0,194,
		195,1,0,0,0,195,198,1,0,0,0,196,197,5,4,0,0,197,199,5,5,0,0,198,196,1,
		0,0,0,198,199,1,0,0,0,199,15,1,0,0,0,200,201,3,134,67,0,201,17,1,0,0,0,
		202,203,5,9,0,0,203,208,3,20,10,0,204,205,5,59,0,0,205,207,3,20,10,0,206,
		204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,19,1,0,
		0,0,210,208,1,0,0,0,211,212,3,50,25,0,212,21,1,0,0,0,213,214,5,28,0,0,
		214,215,5,29,0,0,215,216,3,34,17,0,216,217,5,2,0,0,217,218,3,134,67,0,
		218,220,5,4,0,0,219,221,3,24,12,0,220,219,1,0,0,0,220,221,1,0,0,0,221,
		223,1,0,0,0,222,224,5,59,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,226,1,
		0,0,0,225,227,3,28,14,0,226,225,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,
		0,228,230,5,59,0,0,229,228,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,
		233,3,30,15,0,232,231,1,0,0,0,232,233,1,0,0,0,233,23,1,0,0,0,234,235,5,
		39,0,0,235,236,5,55,0,0,236,241,3,26,13,0,237,238,5,59,0,0,238,240,3,26,
		13,0,239,237,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,
		244,1,0,0,0,243,241,1,0,0,0,244,245,5,56,0,0,245,25,1,0,0,0,246,249,3,
		50,25,0,247,248,5,2,0,0,248,250,3,16,8,0,249,247,1,0,0,0,249,250,1,0,0,
		0,250,27,1,0,0,0,251,252,5,40,0,0,252,253,5,55,0,0,253,258,3,32,16,0,254,
		255,5,59,0,0,255,257,3,32,16,0,256,254,1,0,0,0,257,260,1,0,0,0,258,256,
		1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,5,56,0,
		0,262,263,5,2,0,0,263,264,3,16,8,0,264,29,1,0,0,0,265,266,5,41,0,0,266,
		267,5,55,0,0,267,272,3,32,16,0,268,269,5,59,0,0,269,271,3,32,16,0,270,
		268,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,
		0,0,0,274,272,1,0,0,0,275,276,5,56,0,0,276,277,5,2,0,0,277,278,3,16,8,
		0,278,31,1,0,0,0,279,282,3,50,25,0,280,281,5,2,0,0,281,283,3,16,8,0,282,
		280,1,0,0,0,282,283,1,0,0,0,283,287,1,0,0,0,284,285,5,4,0,0,285,286,5,
		43,0,0,286,288,5,65,0,0,287,284,1,0,0,0,287,288,1,0,0,0,288,33,1,0,0,0,
		289,290,5,65,0,0,290,35,1,0,0,0,291,292,5,10,0,0,292,297,3,38,19,0,293,
		294,5,59,0,0,294,296,3,38,19,0,295,293,1,0,0,0,296,299,1,0,0,0,297,295,
		1,0,0,0,297,298,1,0,0,0,298,37,1,0,0,0,299,297,1,0,0,0,300,301,3,50,25,
		0,301,302,3,40,20,0,302,39,1,0,0,0,303,304,7,0,0,0,304,41,1,0,0,0,305,
		306,5,11,0,0,306,311,3,50,25,0,307,308,5,59,0,0,308,310,3,50,25,0,309,
		307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,43,1,0,
		0,0,313,311,1,0,0,0,314,315,5,18,0,0,315,316,5,44,0,0,316,45,1,0,0,0,317,
		318,5,19,0,0,318,319,5,44,0,0,319,47,1,0,0,0,320,321,5,17,0,0,321,326,
		3,50,25,0,322,323,5,59,0,0,323,325,3,50,25,0,324,322,1,0,0,0,325,328,1,
		0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,49,1,0,0,0,328,326,1,0,0,0,329,
		337,3,66,33,0,330,337,3,52,26,0,331,337,3,54,27,0,332,337,3,56,28,0,333,
		337,3,58,29,0,334,337,3,60,30,0,335,337,3,64,32,0,336,329,1,0,0,0,336,
		330,1,0,0,0,336,331,1,0,0,0,336,332,1,0,0,0,336,333,1,0,0,0,336,334,1,
		0,0,0,336,335,1,0,0,0,337,51,1,0,0,0,338,339,3,66,33,0,339,340,5,34,0,
		0,340,341,3,130,65,0,341,53,1,0,0,0,342,343,3,66,33,0,343,344,5,33,0,0,
		344,345,3,128,64,0,345,346,5,7,0,0,346,347,3,130,65,0,347,55,1,0,0,0,348,
		349,3,66,33,0,349,352,5,3,0,0,350,353,3,72,36,0,351,353,3,104,52,0,352,
		350,1,0,0,0,352,351,1,0,0,0,353,370,1,0,0,0,354,355,5,55,0,0,355,360,3,
		50,25,0,356,357,5,59,0,0,357,359,3,50,25,0,358,356,1,0,0,0,359,362,1,0,
		0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,
		364,5,56,0,0,364,367,5,3,0,0,365,368,3,72,36,0,366,368,3,104,52,0,367,
		365,1,0,0,0,367,366,1,0,0,0,368,370,1,0,0,0,369,348,1,0,0,0,369,354,1,
		0,0,0,370,57,1,0,0,0,371,372,3,66,33,0,372,373,3,132,66,0,373,374,3,130,
		65,0,374,59,1,0,0,0,375,376,3,66,33,0,376,377,3,62,31,0,377,378,3,130,
		65,0,378,61,1,0,0,0,379,380,7,1,0,0,380,63,1,0,0,0,381,382,5,66,0,0,382,
		383,5,67,0,0,383,65,1,0,0,0,384,385,5,55,0,0,385,386,3,50,25,0,386,387,
		5,56,0,0,387,406,1,0,0,0,388,406,3,74,37,0,389,406,3,88,44,0,390,406,3,
		80,40,0,391,406,3,110,55,0,392,406,3,90,45,0,393,406,3,102,51,0,394,406,
		3,84,42,0,395,406,3,86,43,0,396,406,3,112,56,0,397,406,3,114,57,0,398,
		406,3,68,34,0,399,406,3,92,46,0,400,406,3,94,47,0,401,406,3,96,48,0,402,
		406,3,72,36,0,403,406,3,70,35,0,404,406,3,124,62,0,405,384,1,0,0,0,405,
		388,1,0,0,0,405,389,1,0,0,0,405,390,1,0,0,0,405,391,1,0,0,0,405,392,1,
		0,0,0,405,393,1,0,0,0,405,394,1,0,0,0,405,395,1,0,0,0,405,396,1,0,0,0,
		405,397,1,0,0,0,405,398,1,0,0,0,405,399,1,0,0,0,405,400,1,0,0,0,405,401,
		1,0,0,0,405,402,1,0,0,0,405,403,1,0,0,0,405,404,1,0,0,0,406,67,1,0,0,0,
		407,410,3,72,36,0,408,410,3,70,35,0,409,407,1,0,0,0,409,408,1,0,0,0,410,
		411,1,0,0,0,411,412,5,6,0,0,412,413,3,134,67,0,413,69,1,0,0,0,414,415,
		5,57,0,0,415,416,3,4,2,0,416,417,5,58,0,0,417,71,1,0,0,0,418,419,3,134,
		67,0,419,73,1,0,0,0,420,421,3,134,67,0,421,430,5,55,0,0,422,427,3,76,38,
		0,423,424,5,59,0,0,424,426,3,76,38,0,425,423,1,0,0,0,426,429,1,0,0,0,427,
		425,1,0,0,0,427,428,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,430,422,1,
		0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,56,0,0,433,75,1,0,0,0,
		434,438,3,50,25,0,435,438,3,78,39,0,436,438,5,66,0,0,437,434,1,0,0,0,437,
		435,1,0,0,0,437,436,1,0,0,0,438,77,1,0,0,0,439,440,7,2,0,0,440,79,1,0,
		0,0,441,442,5,24,0,0,442,443,5,4,0,0,443,444,5,26,0,0,444,81,1,0,0,0,445,
		448,3,72,36,0,446,448,3,88,44,0,447,445,1,0,0,0,447,446,1,0,0,0,448,83,
		1,0,0,0,449,450,3,82,41,0,450,451,5,6,0,0,451,452,5,35,0,0,452,453,5,55,
		0,0,453,454,3,134,67,0,454,455,5,56,0,0,455,85,1,0,0,0,456,457,3,84,42,
		0,457,458,5,6,0,0,458,459,5,36,0,0,459,460,5,55,0,0,460,461,3,134,67,0,
		461,462,5,56,0,0,462,87,1,0,0,0,463,464,3,72,36,0,464,465,5,6,0,0,465,
		466,5,25,0,0,466,467,5,55,0,0,467,468,3,134,67,0,468,469,5,59,0,0,469,
		470,3,134,67,0,470,471,5,56,0,0,471,89,1,0,0,0,472,473,5,50,0,0,473,91,
		1,0,0,0,474,475,5,21,0,0,475,476,5,55,0,0,476,477,3,50,25,0,477,478,5,
		59,0,0,478,479,5,20,0,0,479,488,5,55,0,0,480,485,3,50,25,0,481,482,5,59,
		0,0,482,484,3,50,25,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,
		485,486,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,488,480,1,0,0,0,488,489,
		1,0,0,0,489,490,1,0,0,0,490,491,5,56,0,0,491,492,5,56,0,0,492,93,1,0,0,
		0,493,494,5,22,0,0,494,495,5,55,0,0,495,496,3,50,25,0,496,497,5,59,0,0,
		497,506,5,55,0,0,498,503,3,20,10,0,499,500,5,59,0,0,500,502,3,20,10,0,
		501,499,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,507,
		1,0,0,0,505,503,1,0,0,0,506,498,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,
		0,508,509,5,56,0,0,509,510,5,56,0,0,510,95,1,0,0,0,511,512,5,27,0,0,512,
		513,5,55,0,0,513,514,3,98,49,0,514,515,5,59,0,0,515,516,5,11,0,0,516,517,
		5,12,0,0,517,526,5,55,0,0,518,523,3,50,25,0,519,520,5,59,0,0,520,522,3,
		50,25,0,521,519,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,
		0,524,527,1,0,0,0,525,523,1,0,0,0,526,518,1,0,0,0,526,527,1,0,0,0,527,
		528,1,0,0,0,528,529,5,56,0,0,529,530,5,59,0,0,530,535,5,44,0,0,531,532,
		5,59,0,0,532,533,5,14,0,0,533,534,5,12,0,0,534,536,3,100,50,0,535,531,
		1,0,0,0,535,536,1,0,0,0,536,539,1,0,0,0,537,538,5,59,0,0,538,540,5,15,
		0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,56,0,0,542,
		97,1,0,0,0,543,544,3,50,25,0,544,99,1,0,0,0,545,546,3,50,25,0,546,101,
		1,0,0,0,547,548,7,3,0,0,548,103,1,0,0,0,549,550,5,55,0,0,550,555,3,108,
		54,0,551,552,5,59,0,0,552,554,3,108,54,0,553,551,1,0,0,0,554,557,1,0,0,
		0,555,553,1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,555,1,0,0,0,558,
		561,5,56,0,0,559,560,5,23,0,0,560,562,3,106,53,0,561,559,1,0,0,0,561,562,
		1,0,0,0,562,105,1,0,0,0,563,564,3,134,67,0,564,107,1,0,0,0,565,577,3,50,
		25,0,566,567,5,55,0,0,567,570,3,50,25,0,568,569,5,59,0,0,569,571,3,50,
		25,0,570,568,1,0,0,0,571,572,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,
		574,1,0,0,0,574,575,5,56,0,0,575,577,1,0,0,0,576,565,1,0,0,0,576,566,1,
		0,0,0,577,109,1,0,0,0,578,579,5,55,0,0,579,580,3,128,64,0,580,581,3,116,
		58,0,581,582,3,130,65,0,582,583,5,56,0,0,583,111,1,0,0,0,584,585,5,55,
		0,0,585,586,3,128,64,0,586,587,3,118,59,0,587,588,3,130,65,0,588,589,5,
		56,0,0,589,113,1,0,0,0,590,591,5,42,0,0,591,592,5,55,0,0,592,593,5,65,
		0,0,593,594,5,56,0,0,594,115,1,0,0,0,595,596,7,4,0,0,596,117,1,0,0,0,597,
		598,7,5,0,0,598,119,1,0,0,0,599,600,5,44,0,0,600,121,1,0,0,0,601,602,3,
		134,67,0,602,123,1,0,0,0,603,604,5,38,0,0,604,125,1,0,0,0,605,606,5,66,
		0,0,606,127,1,0,0,0,607,608,3,50,25,0,608,129,1,0,0,0,609,610,3,50,25,
		0,610,131,1,0,0,0,611,612,7,6,0,0,612,133,1,0,0,0,613,614,7,7,0,0,614,
		135,1,0,0,0,50,144,149,153,156,159,162,165,173,180,185,194,198,208,220,
		223,226,229,232,241,249,258,272,282,287,297,311,326,336,352,360,367,369,
		405,409,427,430,437,447,485,488,503,506,523,526,535,539,555,561,572,576
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Packer2
