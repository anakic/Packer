//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Projects\Packer\Packer2.Library\Report\Queries\Parser\pbiqParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Packer2 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class pbiqParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FROM=1, AS=2, IN=3, WITH=4, NATIVEREFERENCENAME=5, DOT=6, AND=7, OR=8, 
		WHERE=9, ORDERBY=10, GROUPBY=11, COLON=12, ASCENDING=13, SCALARKEY=14, 
		INCLUDEMINGROUPINGINTERVAL=15, DESCENDING=16, SELECT=17, SKIP_=18, TOP=19, 
		SCOPE=20, SCOPEDEVAL=21, FILTEREDEVAL=22, USING=23, ANYVALUE=24, VARIATION=25, 
		DEFAULTVALUEOVERRIDESANCESTORS=26, SPARKLINEDATA=27, TRANSFORM=28, VIA=29, 
		NULL=30, TRUE=31, FALSE=32, BETWEEN=33, CONTAINS=34, HIERARCHY=35, LEVEL=36, 
		AS_=37, DEFAULTVALUE=38, INPUTPARAMETERS=39, INPUTTABLE=40, OUTPUTTABLE=41, 
		TRANSFORMOUTPUTROLE=42, ROLE=43, INTEGER=44, DECIMAL=45, INTEGER_LITERAL=46, 
		DOUBLE_LITERAL=47, DECIMAL_LITERAL=48, DATE=49, DATETIME=50, BASE64BYTES_LITERAL=51, 
		DATEIME_LITERAL=52, STARTSWITH=53, ENDSWITH=54, LPAREN=55, RPAREN=56, 
		LCURLY=57, RCURLY=58, COMMA=59, GT=60, GTE=61, LT=62, LTE=63, EQ=64, STRING_LITERAL=65, 
		IDENTIFIER=66, QUOTED_IDENTIFIER=67, PLUS=68, MINUS=69, MULT=70, DIV=71, 
		WS=72;
	public const int
		RULE_queryRoot = 0, RULE_expressionRoot = 1, RULE_query = 2, RULE_from = 3, 
		RULE_fromElement = 4, RULE_entity_name = 5, RULE_schema = 6, RULE_expressionContainer = 7, 
		RULE_alias = 8, RULE_where = 9, RULE_whereCriterion = 10, RULE_transform = 11, 
		RULE_transform_parameters = 12, RULE_transform_parameter = 13, RULE_transform_inputTable = 14, 
		RULE_transform_outputTable = 15, RULE_transform_tableColumn = 16, RULE_transform_algorithm = 17, 
		RULE_orderby = 18, RULE_orderingCriterion = 19, RULE_direction = 20, RULE_groupby = 21, 
		RULE_skip = 22, RULE_top = 23, RULE_select = 24, RULE_expression = 25, 
		RULE_containsExpr = 26, RULE_betweenExpr = 27, RULE_inExpr = 28, RULE_compareExpr = 29, 
		RULE_binaryStringExpr = 30, RULE_binary_string_operator = 31, RULE_indexer = 32, 
		RULE_primary_expression = 33, RULE_propertyExpression = 34, RULE_subQueryExpr = 35, 
		RULE_sourceRefExpr = 36, RULE_funcExpr = 37, RULE_arg = 38, RULE_number = 39, 
		RULE_anyValueExpr = 40, RULE_hierarchySource = 41, RULE_hierarchyExpr = 42, 
		RULE_hierarchyLevelExpr = 43, RULE_variationExpr = 44, RULE_datetimeSecExpr = 45, 
		RULE_scopedEvalExpr = 46, RULE_filteredEvalExpr = 47, RULE_sparkLineDataExpr = 48, 
		RULE_sparkLineDataMeasure = 49, RULE_scalarKey = 50, RULE_encodedLiteralExpr = 51, 
		RULE_inExprValues = 52, RULE_inExprEqualityKind = 53, RULE_expressionOrExpressionList = 54, 
		RULE_arithmenticExpr = 55, RULE_logicalExpr = 56, RULE_transformOutputRoleRefExpr = 57, 
		RULE_binary_arithmetic_operator = 58, RULE_binary_logic_operator = 59, 
		RULE_amount = 60, RULE_timeunit = 61, RULE_defaultValueExpr = 62, RULE_timeUnit = 63, 
		RULE_left = 64, RULE_right = 65, RULE_comparisonOperator = 66, RULE_identifier = 67;
	public static readonly string[] ruleNames = {
		"queryRoot", "expressionRoot", "query", "from", "fromElement", "entity_name", 
		"schema", "expressionContainer", "alias", "where", "whereCriterion", "transform", 
		"transform_parameters", "transform_parameter", "transform_inputTable", 
		"transform_outputTable", "transform_tableColumn", "transform_algorithm", 
		"orderby", "orderingCriterion", "direction", "groupby", "skip", "top", 
		"select", "expression", "containsExpr", "betweenExpr", "inExpr", "compareExpr", 
		"binaryStringExpr", "binary_string_operator", "indexer", "primary_expression", 
		"propertyExpression", "subQueryExpr", "sourceRefExpr", "funcExpr", "arg", 
		"number", "anyValueExpr", "hierarchySource", "hierarchyExpr", "hierarchyLevelExpr", 
		"variationExpr", "datetimeSecExpr", "scopedEvalExpr", "filteredEvalExpr", 
		"sparkLineDataExpr", "sparkLineDataMeasure", "scalarKey", "encodedLiteralExpr", 
		"inExprValues", "inExprEqualityKind", "expressionOrExpressionList", "arithmenticExpr", 
		"logicalExpr", "transformOutputRoleRefExpr", "binary_arithmetic_operator", 
		"binary_logic_operator", "amount", "timeunit", "defaultValueExpr", "timeUnit", 
		"left", "right", "comparisonOperator", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"':'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", 
		"','", "'>'", "'>='", "'<'", "'<='", "'='", null, null, null, "'+'", "'-'", 
		"'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FROM", "AS", "IN", "WITH", "NATIVEREFERENCENAME", "DOT", "AND", 
		"OR", "WHERE", "ORDERBY", "GROUPBY", "COLON", "ASCENDING", "SCALARKEY", 
		"INCLUDEMINGROUPINGINTERVAL", "DESCENDING", "SELECT", "SKIP_", "TOP", 
		"SCOPE", "SCOPEDEVAL", "FILTEREDEVAL", "USING", "ANYVALUE", "VARIATION", 
		"DEFAULTVALUEOVERRIDESANCESTORS", "SPARKLINEDATA", "TRANSFORM", "VIA", 
		"NULL", "TRUE", "FALSE", "BETWEEN", "CONTAINS", "HIERARCHY", "LEVEL", 
		"AS_", "DEFAULTVALUE", "INPUTPARAMETERS", "INPUTTABLE", "OUTPUTTABLE", 
		"TRANSFORMOUTPUTROLE", "ROLE", "INTEGER", "DECIMAL", "INTEGER_LITERAL", 
		"DOUBLE_LITERAL", "DECIMAL_LITERAL", "DATE", "DATETIME", "BASE64BYTES_LITERAL", 
		"DATEIME_LITERAL", "STARTSWITH", "ENDSWITH", "LPAREN", "RPAREN", "LCURLY", 
		"RCURLY", "COMMA", "GT", "GTE", "LT", "LTE", "EQ", "STRING_LITERAL", "IDENTIFIER", 
		"QUOTED_IDENTIFIER", "PLUS", "MINUS", "MULT", "DIV", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pbiqParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static pbiqParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pbiqParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pbiqParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pbiqParser.Eof, 0); }
		public QueryRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryRootContext queryRoot() {
		QueryRootContext _localctx = new QueryRootContext(Context, State);
		EnterRule(_localctx, 0, RULE_queryRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			query();
			State = 137;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionRootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pbiqParser.Eof, 0); }
		public ExpressionRootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionRoot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionRootContext expressionRoot() {
		ExpressionRootContext _localctx = new ExpressionRootContext(Context, State);
		EnterRule(_localctx, 2, RULE_expressionRoot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			expression();
			State = 140;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext[] transform() {
			return GetRuleContexts<TransformContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformContext transform(int i) {
			return GetRuleContext<TransformContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipContext skip() {
			return GetRuleContext<SkipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			from();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 143;
				where();
				}
			}

			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TRANSFORM) {
				{
				{
				State = 146;
				transform();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDERBY) {
				{
				State = 152;
				orderby();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELECT) {
				{
				State = 155;
				select();
				}
			}

			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUPBY) {
				{
				State = 158;
				groupby();
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_) {
				{
				State = 161;
				skip();
				}
			}

			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 164;
				top();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(pbiqParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromElementContext[] fromElement() {
			return GetRuleContexts<FromElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromElementContext fromElement(int i) {
			return GetRuleContext<FromElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(Context, State);
		EnterRule(_localctx, 6, RULE_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(FROM);
			State = 168;
			fromElement();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 169;
				Match(COMMA);
				State = 170;
				fromElement();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pbiqParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public FromElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromElementContext fromElement() {
		FromElementContext _localctx = new FromElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_fromElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			alias();
			State = 177;
			Match(IN);
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIATION:
			case LEVEL:
			case IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 178;
				entity_name();
				}
				break;
			case LCURLY:
				{
				State = 179;
				subQueryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaContext schema() {
			return GetRuleContext<SchemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 182;
				schema();
				State = 183;
				Match(DOT);
				}
				break;
			}
			State = 187;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 12, RULE_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVEREFERENCENAME() { return GetToken(pbiqParser.NATIVEREFERENCENAME, 0); }
		public ExpressionContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionContainer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContainerContext expressionContainer() {
		ExpressionContainerContext _localctx = new ExpressionContainerContext(Context, State);
		EnterRule(_localctx, 14, RULE_expressionContainer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			expression();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 192;
				Match(AS);
				State = 193;
				alias();
				}
			}

			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 196;
				Match(WITH);
				State = 197;
				Match(NATIVEREFERENCENAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 16, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(pbiqParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext[] whereCriterion() {
			return GetRuleContexts<WhereCriterionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext whereCriterion(int i) {
			return GetRuleContext<WhereCriterionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 18, RULE_where);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(WHERE);
			State = 203;
			whereCriterion();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 204;
				Match(COMMA);
				State = 205;
				whereCriterion();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereCriterionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereCriterionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereCriterion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereCriterion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereCriterionContext whereCriterion() {
		WhereCriterionContext _localctx = new WhereCriterionContext(Context, State);
		EnterRule(_localctx, 20, RULE_whereCriterion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORM() { return GetToken(pbiqParser.TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(pbiqParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_algorithmContext transform_algorithm() {
			return GetRuleContext<Transform_algorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_parametersContext transform_parameters() {
			return GetRuleContext<Transform_parametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_inputTableContext transform_inputTable() {
			return GetRuleContext<Transform_inputTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_outputTableContext transform_outputTable() {
			return GetRuleContext<Transform_outputTableContext>(0);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 22, RULE_transform);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(TRANSFORM);
			State = 214;
			Match(VIA);
			State = 215;
			transform_algorithm();
			State = 216;
			Match(AS);
			State = 217;
			identifier();
			State = 218;
			Match(WITH);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INPUTPARAMETERS) {
				{
				State = 219;
				transform_parameters();
				}
			}

			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 222;
				Match(COMMA);
				}
				break;
			}
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INPUTTABLE) {
				{
				State = 225;
				transform_inputTable();
				}
			}

			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 228;
				Match(COMMA);
				}
			}

			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTPUTTABLE) {
				{
				State = 231;
				transform_outputTable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUTPARAMETERS() { return GetToken(pbiqParser.INPUTPARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_parameterContext[] transform_parameter() {
			return GetRuleContexts<Transform_parameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_parameterContext transform_parameter(int i) {
			return GetRuleContext<Transform_parameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public Transform_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_parametersContext transform_parameters() {
		Transform_parametersContext _localctx = new Transform_parametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_transform_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(INPUTPARAMETERS);
			State = 235;
			Match(LPAREN);
			State = 236;
			transform_parameter();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 237;
				Match(COMMA);
				State = 238;
				transform_parameter();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 244;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public Transform_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_parameterContext transform_parameter() {
		Transform_parameterContext _localctx = new Transform_parameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_transform_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			expression();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 247;
				Match(AS);
				State = 248;
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_inputTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPUTTABLE() { return GetToken(pbiqParser.INPUTTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext[] transform_tableColumn() {
			return GetRuleContexts<Transform_tableColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext transform_tableColumn(int i) {
			return GetRuleContext<Transform_tableColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public Transform_inputTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_inputTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_inputTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_inputTableContext transform_inputTable() {
		Transform_inputTableContext _localctx = new Transform_inputTableContext(Context, State);
		EnterRule(_localctx, 28, RULE_transform_inputTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(INPUTTABLE);
			State = 252;
			Match(LPAREN);
			State = 253;
			transform_tableColumn();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 254;
				Match(COMMA);
				State = 255;
				transform_tableColumn();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(RPAREN);
			State = 262;
			Match(AS);
			State = 263;
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_outputTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUTTABLE() { return GetToken(pbiqParser.OUTPUTTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext[] transform_tableColumn() {
			return GetRuleContexts<Transform_tableColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transform_tableColumnContext transform_tableColumn(int i) {
			return GetRuleContext<Transform_tableColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public Transform_outputTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_outputTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_outputTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_outputTableContext transform_outputTable() {
		Transform_outputTableContext _localctx = new Transform_outputTableContext(Context, State);
		EnterRule(_localctx, 30, RULE_transform_outputTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(OUTPUTTABLE);
			State = 266;
			Match(LPAREN);
			State = 267;
			transform_tableColumn();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 268;
				Match(COMMA);
				State = 269;
				transform_tableColumn();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275;
			Match(RPAREN);
			State = 276;
			Match(AS);
			State = 277;
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_tableColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(pbiqParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		public Transform_tableColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_tableColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_tableColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_tableColumnContext transform_tableColumn() {
		Transform_tableColumnContext _localctx = new Transform_tableColumnContext(Context, State);
		EnterRule(_localctx, 32, RULE_transform_tableColumn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression();
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 280;
				Match(AS);
				State = 281;
				alias();
				}
			}

			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 284;
				Match(WITH);
				State = 285;
				Match(ROLE);
				State = 286;
				Match(STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transform_algorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		public Transform_algorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform_algorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransform_algorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transform_algorithmContext transform_algorithm() {
		Transform_algorithmContext _localctx = new Transform_algorithmContext(Context, State);
		EnterRule(_localctx, 34, RULE_transform_algorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(pbiqParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderingCriterionContext[] orderingCriterion() {
			return GetRuleContexts<OrderingCriterionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderingCriterionContext orderingCriterion(int i) {
			return GetRuleContext<OrderingCriterionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 36, RULE_orderby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(ORDERBY);
			State = 292;
			orderingCriterion();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 293;
				Match(COMMA);
				State = 294;
				orderingCriterion();
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingCriterionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderingCriterionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderingCriterion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderingCriterion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingCriterionContext orderingCriterion() {
		OrderingCriterionContext _localctx = new OrderingCriterionContext(Context, State);
		EnterRule(_localctx, 38, RULE_orderingCriterion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			expression();
			State = 301;
			direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(pbiqParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(pbiqParser.DESCENDING, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 40, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = TokenStream.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPBY() { return GetToken(pbiqParser.GROUPBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 42, RULE_groupby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(GROUPBY);
			State = 306;
			expression();
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 307;
				Match(COMMA);
				State = 308;
				expression();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(pbiqParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 44, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(SKIP_);
			State = 315;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(pbiqParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 46, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(TOP);
			State = 318;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(pbiqParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 48, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(SELECT);
			State = 321;
			expression();
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 322;
				Match(COMMA);
				State = 323;
				expression();
				}
				}
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsExprContext containsExpr() {
			return GetRuleContext<ContainsExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BetweenExprContext betweenExpr() {
			return GetRuleContext<BetweenExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InExprContext inExpr() {
			return GetRuleContext<InExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareExprContext compareExpr() {
			return GetRuleContext<CompareExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryStringExprContext binaryStringExpr() {
			return GetRuleContext<BinaryStringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexerContext indexer() {
			return GetRuleContext<IndexerContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329;
				primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				containsExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331;
				betweenExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332;
				inExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 333;
				compareExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 334;
				binaryStringExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 335;
				indexer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pbiqParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public ContainsExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsExprContext containsExpr() {
		ContainsExprContext _localctx = new ContainsExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_containsExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			primary_expression();
			State = 339;
			Match(CONTAINS);
			State = 340;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BetweenExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(pbiqParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pbiqParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public BetweenExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_betweenExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BetweenExprContext betweenExpr() {
		BetweenExprContext _localctx = new BetweenExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_betweenExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			primary_expression();
			State = 343;
			Match(BETWEEN);
			State = 344;
			left();
			State = 345;
			Match(AND);
			State = 346;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pbiqParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InExprValuesContext inExprValues() {
			return GetRuleContext<InExprValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(pbiqParser.COMMA, 0); }
		public InExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprContext inExpr() {
		InExprContext _localctx = new InExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_inExpr);
		try {
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348;
				primary_expression();
				State = 349;
				Match(IN);
				State = 352;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIATION:
				case LEVEL:
				case IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 350;
					sourceRefExpr();
					}
					break;
				case LPAREN:
					{
					State = 351;
					inExprValues();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 354;
				Match(LPAREN);
				State = 355;
				expression();
				{
				State = 356;
				Match(COMMA);
				State = 357;
				expression();
				}
				State = 359;
				Match(RPAREN);
				State = 360;
				Match(IN);
				State = 363;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIATION:
				case LEVEL:
				case IDENTIFIER:
				case QUOTED_IDENTIFIER:
					{
					State = 361;
					sourceRefExpr();
					}
					break;
				case LPAREN:
					{
					State = 362;
					inExprValues();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public CompareExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareExprContext compareExpr() {
		CompareExprContext _localctx = new CompareExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_compareExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			primary_expression();
			State = 368;
			comparisonOperator();
			State = 369;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryStringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_string_operatorContext binary_string_operator() {
			return GetRuleContext<Binary_string_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public BinaryStringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryStringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryStringExprContext binaryStringExpr() {
		BinaryStringExprContext _localctx = new BinaryStringExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_binaryStringExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			primary_expression();
			State = 372;
			binary_string_operator();
			State = 373;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_string_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(pbiqParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(pbiqParser.ENDSWITH, 0); }
		public Binary_string_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_string_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_string_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_string_operatorContext binary_string_operator() {
		Binary_string_operatorContext _localctx = new Binary_string_operatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_binary_string_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTSWITH || _la==ENDSWITH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(pbiqParser.QUOTED_IDENTIFIER, 0); }
		public IndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexerContext indexer() {
		IndexerContext _localctx = new IndexerContext(Context, State);
		EnterRule(_localctx, 64, RULE_indexer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			Match(IDENTIFIER);
			State = 378;
			Match(QUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncExprContext funcExpr() {
			return GetRuleContext<FuncExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariationExprContext variationExpr() {
			return GetRuleContext<VariationExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyValueExprContext anyValueExpr() {
			return GetRuleContext<AnyValueExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmenticExprContext arithmenticExpr() {
			return GetRuleContext<ArithmenticExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeSecExprContext datetimeSecExpr() {
			return GetRuleContext<DatetimeSecExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EncodedLiteralExprContext encodedLiteralExpr() {
			return GetRuleContext<EncodedLiteralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HierarchyExprContext hierarchyExpr() {
			return GetRuleContext<HierarchyExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HierarchyLevelExprContext hierarchyLevelExpr() {
			return GetRuleContext<HierarchyLevelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalExprContext logicalExpr() {
			return GetRuleContext<LogicalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransformOutputRoleRefExprContext transformOutputRoleRefExpr() {
			return GetRuleContext<TransformOutputRoleRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression() {
			return GetRuleContext<PropertyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopedEvalExprContext scopedEvalExpr() {
			return GetRuleContext<ScopedEvalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilteredEvalExprContext filteredEvalExpr() {
			return GetRuleContext<FilteredEvalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SparkLineDataExprContext sparkLineDataExpr() {
			return GetRuleContext<SparkLineDataExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueExprContext defaultValueExpr() {
			return GetRuleContext<DefaultValueExprContext>(0);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_primary_expression);
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 380;
				Match(LPAREN);
				State = 381;
				expression();
				State = 382;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				funcExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385;
				variationExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386;
				anyValueExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 387;
				arithmenticExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 388;
				datetimeSecExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 389;
				encodedLiteralExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 390;
				hierarchyExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 391;
				hierarchyLevelExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 392;
				logicalExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 393;
				transformOutputRoleRefExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 394;
				propertyExpression();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 395;
				scopedEvalExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 396;
				filteredEvalExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 397;
				sparkLineDataExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 398;
				sourceRefExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 399;
				subQueryExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 400;
				defaultValueExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExprContext subQueryExpr() {
			return GetRuleContext<SubQueryExprContext>(0);
		}
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionContext propertyExpression() {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_propertyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIATION:
			case LEVEL:
			case IDENTIFIER:
			case QUOTED_IDENTIFIER:
				{
				State = 403;
				sourceRefExpr();
				}
				break;
			case LCURLY:
				{
				State = 404;
				subQueryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 407;
			Match(DOT);
			State = 408;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubQueryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCURLY() { return GetToken(pbiqParser.LCURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCURLY() { return GetToken(pbiqParser.RCURLY, 0); }
		public SubQueryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subQueryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQueryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubQueryExprContext subQueryExpr() {
		SubQueryExprContext _localctx = new SubQueryExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_subQueryExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(LCURLY);
			State = 411;
			query();
			State = 412;
			Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceRefExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SourceRefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceRefExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceRefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceRefExprContext sourceRefExpr() {
		SourceRefExprContext _localctx = new SourceRefExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_sourceRefExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncExprContext funcExpr() {
		FuncExprContext _localctx = new FuncExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_funcExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			identifier();
			State = 417;
			Match(LPAREN);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (SCOPEDEVAL - 21)) | (1L << (FILTEREDEVAL - 21)) | (1L << (ANYVALUE - 21)) | (1L << (VARIATION - 21)) | (1L << (SPARKLINEDATA - 21)) | (1L << (NULL - 21)) | (1L << (TRUE - 21)) | (1L << (FALSE - 21)) | (1L << (LEVEL - 21)) | (1L << (DEFAULTVALUE - 21)) | (1L << (TRANSFORMOUTPUTROLE - 21)) | (1L << (INTEGER - 21)) | (1L << (DECIMAL - 21)) | (1L << (INTEGER_LITERAL - 21)) | (1L << (DOUBLE_LITERAL - 21)) | (1L << (DECIMAL_LITERAL - 21)) | (1L << (DATETIME - 21)) | (1L << (BASE64BYTES_LITERAL - 21)) | (1L << (DATEIME_LITERAL - 21)) | (1L << (LPAREN - 21)) | (1L << (LCURLY - 21)) | (1L << (STRING_LITERAL - 21)) | (1L << (IDENTIFIER - 21)) | (1L << (QUOTED_IDENTIFIER - 21)))) != 0)) {
				{
				State = 418;
				arg();
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 419;
					Match(COMMA);
					State = 420;
					arg();
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 428;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 76, RULE_arg);
		try {
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431;
				number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 432;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(pbiqParser.DECIMAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 78, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==DECIMAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyValueExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANYVALUE() { return GetToken(pbiqParser.ANYVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTVALUEOVERRIDESANCESTORS() { return GetToken(pbiqParser.DEFAULTVALUEOVERRIDESANCESTORS, 0); }
		public AnyValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyValueExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyValueExprContext anyValueExpr() {
		AnyValueExprContext _localctx = new AnyValueExprContext(Context, State);
		EnterRule(_localctx, 80, RULE_anyValueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(ANYVALUE);
			State = 438;
			Match(WITH);
			State = 439;
			Match(DEFAULTVALUEOVERRIDESANCESTORS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchySourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariationExprContext variationExpr() {
			return GetRuleContext<VariationExprContext>(0);
		}
		public HierarchySourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchySource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchySource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchySourceContext hierarchySource() {
		HierarchySourceContext _localctx = new HierarchySourceContext(Context, State);
		EnterRule(_localctx, 82, RULE_hierarchySource);
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 441;
				sourceRefExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 442;
				variationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchyExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HierarchySourceContext hierarchySource() {
			return GetRuleContext<HierarchySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIERARCHY() { return GetToken(pbiqParser.HIERARCHY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public HierarchyExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchyExprContext hierarchyExpr() {
		HierarchyExprContext _localctx = new HierarchyExprContext(Context, State);
		EnterRule(_localctx, 84, RULE_hierarchyExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			hierarchySource();
			State = 446;
			Match(DOT);
			State = 447;
			Match(HIERARCHY);
			State = 448;
			Match(LPAREN);
			State = 449;
			identifier();
			State = 450;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HierarchyLevelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HierarchyExprContext hierarchyExpr() {
			return GetRuleContext<HierarchyExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(pbiqParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public HierarchyLevelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchyLevelExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchyLevelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HierarchyLevelExprContext hierarchyLevelExpr() {
		HierarchyLevelExprContext _localctx = new HierarchyLevelExprContext(Context, State);
		EnterRule(_localctx, 86, RULE_hierarchyLevelExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			hierarchyExpr();
			State = 453;
			Match(DOT);
			State = 454;
			Match(LEVEL);
			State = 455;
			Match(LPAREN);
			State = 456;
			identifier();
			State = 457;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariationExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIATION() { return GetToken(pbiqParser.VARIATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(pbiqParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public VariationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variationExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariationExprContext variationExpr() {
		VariationExprContext _localctx = new VariationExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_variationExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			sourceRefExpr();
			State = 460;
			Match(DOT);
			State = 461;
			Match(VARIATION);
			State = 462;
			Match(LPAREN);
			State = 463;
			identifier();
			State = 464;
			Match(COMMA);
			State = 465;
			identifier();
			State = 466;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeSecExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(pbiqParser.DATETIME, 0); }
		public DatetimeSecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetimeSecExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetimeSecExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeSecExprContext datetimeSecExpr() {
		DatetimeSecExprContext _localctx = new DatetimeSecExprContext(Context, State);
		EnterRule(_localctx, 90, RULE_datetimeSecExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(DATETIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopedEvalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPEDEVAL() { return GetToken(pbiqParser.SCOPEDEVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(pbiqParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(pbiqParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE() { return GetToken(pbiqParser.SCOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(pbiqParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(pbiqParser.RPAREN, i);
		}
		public ScopedEvalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopedEvalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedEvalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopedEvalExprContext scopedEvalExpr() {
		ScopedEvalExprContext _localctx = new ScopedEvalExprContext(Context, State);
		EnterRule(_localctx, 92, RULE_scopedEvalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			Match(SCOPEDEVAL);
			State = 471;
			Match(LPAREN);
			State = 472;
			expression();
			State = 473;
			Match(COMMA);
			State = 474;
			Match(SCOPE);
			State = 475;
			Match(LPAREN);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (SCOPEDEVAL - 21)) | (1L << (FILTEREDEVAL - 21)) | (1L << (ANYVALUE - 21)) | (1L << (VARIATION - 21)) | (1L << (SPARKLINEDATA - 21)) | (1L << (NULL - 21)) | (1L << (TRUE - 21)) | (1L << (FALSE - 21)) | (1L << (LEVEL - 21)) | (1L << (DEFAULTVALUE - 21)) | (1L << (TRANSFORMOUTPUTROLE - 21)) | (1L << (INTEGER_LITERAL - 21)) | (1L << (DOUBLE_LITERAL - 21)) | (1L << (DECIMAL_LITERAL - 21)) | (1L << (DATETIME - 21)) | (1L << (BASE64BYTES_LITERAL - 21)) | (1L << (DATEIME_LITERAL - 21)) | (1L << (LPAREN - 21)) | (1L << (LCURLY - 21)) | (1L << (STRING_LITERAL - 21)) | (1L << (IDENTIFIER - 21)) | (1L << (QUOTED_IDENTIFIER - 21)))) != 0)) {
				{
				State = 476;
				expression();
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 477;
					Match(COMMA);
					State = 478;
					expression();
					}
					}
					State = 483;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 486;
			Match(RPAREN);
			State = 487;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredEvalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTEREDEVAL() { return GetToken(pbiqParser.FILTEREDEVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(pbiqParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(pbiqParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(pbiqParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(pbiqParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext[] whereCriterion() {
			return GetRuleContexts<WhereCriterionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereCriterionContext whereCriterion(int i) {
			return GetRuleContext<WhereCriterionContext>(i);
		}
		public FilteredEvalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredEvalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredEvalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredEvalExprContext filteredEvalExpr() {
		FilteredEvalExprContext _localctx = new FilteredEvalExprContext(Context, State);
		EnterRule(_localctx, 94, RULE_filteredEvalExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			Match(FILTEREDEVAL);
			State = 490;
			Match(LPAREN);
			State = 491;
			expression();
			State = 492;
			Match(COMMA);
			State = 493;
			Match(LPAREN);
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (SCOPEDEVAL - 21)) | (1L << (FILTEREDEVAL - 21)) | (1L << (ANYVALUE - 21)) | (1L << (VARIATION - 21)) | (1L << (SPARKLINEDATA - 21)) | (1L << (NULL - 21)) | (1L << (TRUE - 21)) | (1L << (FALSE - 21)) | (1L << (LEVEL - 21)) | (1L << (DEFAULTVALUE - 21)) | (1L << (TRANSFORMOUTPUTROLE - 21)) | (1L << (INTEGER_LITERAL - 21)) | (1L << (DOUBLE_LITERAL - 21)) | (1L << (DECIMAL_LITERAL - 21)) | (1L << (DATETIME - 21)) | (1L << (BASE64BYTES_LITERAL - 21)) | (1L << (DATEIME_LITERAL - 21)) | (1L << (LPAREN - 21)) | (1L << (LCURLY - 21)) | (1L << (STRING_LITERAL - 21)) | (1L << (IDENTIFIER - 21)) | (1L << (QUOTED_IDENTIFIER - 21)))) != 0)) {
				{
				State = 494;
				whereCriterion();
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 495;
					Match(COMMA);
					State = 496;
					whereCriterion();
					}
					}
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 504;
			Match(RPAREN);
			State = 505;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparkLineDataExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPARKLINEDATA() { return GetToken(pbiqParser.SPARKLINEDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(pbiqParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(pbiqParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SparkLineDataMeasureContext sparkLineDataMeasure() {
			return GetRuleContext<SparkLineDataMeasureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPBY() { return GetToken(pbiqParser.GROUPBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(pbiqParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(pbiqParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(pbiqParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(pbiqParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCALARKEY() { return GetToken(pbiqParser.SCALARKEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScalarKeyContext scalarKey() {
			return GetRuleContext<ScalarKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCLUDEMINGROUPINGINTERVAL() { return GetToken(pbiqParser.INCLUDEMINGROUPINGINTERVAL, 0); }
		public SparkLineDataExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparkLineDataExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparkLineDataExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparkLineDataExprContext sparkLineDataExpr() {
		SparkLineDataExprContext _localctx = new SparkLineDataExprContext(Context, State);
		EnterRule(_localctx, 96, RULE_sparkLineDataExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(SPARKLINEDATA);
			State = 508;
			Match(LPAREN);
			State = 509;
			sparkLineDataMeasure();
			State = 510;
			Match(COMMA);
			State = 511;
			Match(GROUPBY);
			State = 512;
			Match(COLON);
			State = 513;
			Match(LPAREN);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & ((1L << (SCOPEDEVAL - 21)) | (1L << (FILTEREDEVAL - 21)) | (1L << (ANYVALUE - 21)) | (1L << (VARIATION - 21)) | (1L << (SPARKLINEDATA - 21)) | (1L << (NULL - 21)) | (1L << (TRUE - 21)) | (1L << (FALSE - 21)) | (1L << (LEVEL - 21)) | (1L << (DEFAULTVALUE - 21)) | (1L << (TRANSFORMOUTPUTROLE - 21)) | (1L << (INTEGER_LITERAL - 21)) | (1L << (DOUBLE_LITERAL - 21)) | (1L << (DECIMAL_LITERAL - 21)) | (1L << (DATETIME - 21)) | (1L << (BASE64BYTES_LITERAL - 21)) | (1L << (DATEIME_LITERAL - 21)) | (1L << (LPAREN - 21)) | (1L << (LCURLY - 21)) | (1L << (STRING_LITERAL - 21)) | (1L << (IDENTIFIER - 21)) | (1L << (QUOTED_IDENTIFIER - 21)))) != 0)) {
				{
				State = 514;
				expression();
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 515;
					Match(COMMA);
					State = 516;
					expression();
					}
					}
					State = 521;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 524;
			Match(RPAREN);
			State = 525;
			Match(COMMA);
			State = 526;
			Match(INTEGER);
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 527;
				Match(COMMA);
				State = 528;
				Match(SCALARKEY);
				State = 529;
				Match(COLON);
				State = 530;
				scalarKey();
				}
				break;
			}
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 533;
				Match(COMMA);
				State = 534;
				Match(INCLUDEMINGROUPINGINTERVAL);
				}
			}

			State = 537;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SparkLineDataMeasureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SparkLineDataMeasureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sparkLineDataMeasure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSparkLineDataMeasure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SparkLineDataMeasureContext sparkLineDataMeasure() {
		SparkLineDataMeasureContext _localctx = new SparkLineDataMeasureContext(Context, State);
		EnterRule(_localctx, 98, RULE_sparkLineDataMeasure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScalarKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarKeyContext scalarKey() {
		ScalarKeyContext _localctx = new ScalarKeyContext(Context, State);
		EnterRule(_localctx, 100, RULE_scalarKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncodedLiteralExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(pbiqParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(pbiqParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_LITERAL() { return GetToken(pbiqParser.DOUBLE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE64BYTES_LITERAL() { return GetToken(pbiqParser.BASE64BYTES_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEIME_LITERAL() { return GetToken(pbiqParser.DATEIME_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(pbiqParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(pbiqParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(pbiqParser.NULL, 0); }
		public EncodedLiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encodedLiteralExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncodedLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncodedLiteralExprContext encodedLiteralExpr() {
		EncodedLiteralExprContext _localctx = new EncodedLiteralExprContext(Context, State);
		EnterRule(_localctx, 102, RULE_encodedLiteralExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (NULL - 30)) | (1L << (TRUE - 30)) | (1L << (FALSE - 30)) | (1L << (INTEGER_LITERAL - 30)) | (1L << (DOUBLE_LITERAL - 30)) | (1L << (DECIMAL_LITERAL - 30)) | (1L << (BASE64BYTES_LITERAL - 30)) | (1L << (DATEIME_LITERAL - 30)) | (1L << (STRING_LITERAL - 30)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrExpressionListContext[] expressionOrExpressionList() {
			return GetRuleContexts<ExpressionOrExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrExpressionListContext expressionOrExpressionList(int i) {
			return GetRuleContext<ExpressionOrExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(pbiqParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InExprEqualityKindContext inExprEqualityKind() {
			return GetRuleContext<InExprEqualityKindContext>(0);
		}
		public InExprValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExprValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExprValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprValuesContext inExprValues() {
		InExprValuesContext _localctx = new InExprValuesContext(Context, State);
		EnterRule(_localctx, 104, RULE_inExprValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(LPAREN);
			State = 546;
			expressionOrExpressionList();
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 547;
				Match(COMMA);
				State = 548;
				expressionOrExpressionList();
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 554;
			Match(RPAREN);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 555;
				Match(USING);
				State = 556;
				inExprEqualityKind();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprEqualityKindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InExprEqualityKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExprEqualityKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExprEqualityKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprEqualityKindContext inExprEqualityKind() {
		InExprEqualityKindContext _localctx = new InExprEqualityKindContext(Context, State);
		EnterRule(_localctx, 106, RULE_inExprEqualityKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public ExpressionOrExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrExpressionListContext expressionOrExpressionList() {
		ExpressionOrExpressionListContext _localctx = new ExpressionOrExpressionListContext(Context, State);
		EnterRule(_localctx, 108, RULE_expressionOrExpressionList);
		int _la;
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562;
				Match(LPAREN);
				State = 563;
				expression();
				State = 566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 564;
					Match(COMMA);
					State = 565;
					expression();
					}
					}
					State = 568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 570;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmenticExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_arithmetic_operatorContext binary_arithmetic_operator() {
			return GetRuleContext<Binary_arithmetic_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public ArithmenticExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmenticExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmenticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmenticExprContext arithmenticExpr() {
		ArithmenticExprContext _localctx = new ArithmenticExprContext(Context, State);
		EnterRule(_localctx, 110, RULE_arithmenticExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(LPAREN);
			State = 575;
			left();
			State = 576;
			binary_arithmetic_operator();
			State = 577;
			right();
			State = 578;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binary_logic_operatorContext binary_logic_operator() {
			return GetRuleContext<Binary_logic_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public LogicalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalExprContext logicalExpr() {
		LogicalExprContext _localctx = new LogicalExprContext(Context, State);
		EnterRule(_localctx, 112, RULE_logicalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(LPAREN);
			State = 581;
			left();
			State = 582;
			binary_logic_operator();
			State = 583;
			right();
			State = 584;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransformOutputRoleRefExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSFORMOUTPUTROLE() { return GetToken(pbiqParser.TRANSFORMOUTPUTROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public TransformOutputRoleRefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transformOutputRoleRefExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransformOutputRoleRefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransformOutputRoleRefExprContext transformOutputRoleRefExpr() {
		TransformOutputRoleRefExprContext _localctx = new TransformOutputRoleRefExprContext(Context, State);
		EnterRule(_localctx, 114, RULE_transformOutputRoleRefExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(TRANSFORMOUTPUTROLE);
			State = 587;
			Match(LPAREN);
			State = 588;
			Match(STRING_LITERAL);
			State = 589;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_arithmetic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(pbiqParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(pbiqParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(pbiqParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(pbiqParser.MULT, 0); }
		public Binary_arithmetic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_arithmetic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_arithmetic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_arithmetic_operatorContext binary_arithmetic_operator() {
		Binary_arithmetic_operatorContext _localctx = new Binary_arithmetic_operatorContext(Context, State);
		EnterRule(_localctx, 116, RULE_binary_arithmetic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PLUS - 68)) | (1L << (MINUS - 68)) | (1L << (MULT - 68)) | (1L << (DIV - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_logic_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pbiqParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pbiqParser.OR, 0); }
		public Binary_logic_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_logic_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_logic_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_logic_operatorContext binary_logic_operator() {
		Binary_logic_operatorContext _localctx = new Binary_logic_operatorContext(Context, State);
		EnterRule(_localctx, 118, RULE_binary_logic_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 120, RULE_amount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeunitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TimeunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeunit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeunit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeunitContext timeunit() {
		TimeunitContext _localctx = new TimeunitContext(Context, State);
		EnterRule(_localctx, 122, RULE_timeunit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTVALUE() { return GetToken(pbiqParser.DEFAULTVALUE, 0); }
		public DefaultValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValueExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueExprContext defaultValueExpr() {
		DefaultValueExprContext _localctx = new DefaultValueExprContext(Context, State);
		EnterRule(_localctx, 124, RULE_defaultValueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			Match(DEFAULTVALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public TimeUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeUnitContext timeUnit() {
		TimeUnitContext _localctx = new TimeUnitContext(Context, State);
		EnterRule(_localctx, 126, RULE_timeUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftContext left() {
		LeftContext _localctx = new LeftContext(Context, State);
		EnterRule(_localctx, 128, RULE_left);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightContext right() {
		RightContext _localctx = new RightContext(Context, State);
		EnterRule(_localctx, 130, RULE_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pbiqParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pbiqParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pbiqParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(pbiqParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(pbiqParser.LTE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 607;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (GT - 60)) | (1L << (GTE - 60)) | (1L << (LT - 60)) | (1L << (LTE - 60)) | (1L << (EQ - 60)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED_IDENTIFIER() { return GetToken(pbiqParser.QUOTED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(pbiqParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIATION() { return GetToken(pbiqParser.VARIATION, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 134, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (VARIATION - 25)) | (1L << (LEVEL - 25)) | (1L << (IDENTIFIER - 25)) | (1L << (QUOTED_IDENTIFIER - 25)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'J', '\x266', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x93', 
		'\n', '\x4', '\x3', '\x4', '\a', '\x4', '\x96', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x99', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', '\x9C', 
		'\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x9F', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\xA2', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\xA5', 
		'\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\xA8', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xAE', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\xB1', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB7', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xBC', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xC5', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xC9', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xD1', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\xD4', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xDF', '\n', '\r', '\x3', '\r', '\x5', 
		'\r', '\xE2', '\n', '\r', '\x3', '\r', '\x5', '\r', '\xE5', '\n', '\r', 
		'\x3', '\r', '\x5', '\r', '\xE8', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\xEB', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\a', '\xE', '\xF2', '\n', '\xE', '\f', '\xE', '\xE', '\xE', 
		'\xF5', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xFC', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x103', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x106', '\v', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x111', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x114', '\v', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x11D', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x122', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x12A', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x12D', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x138', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x13B', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x147', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x14A', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x153', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x163', '\n', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x16E', '\n', 
		'\x1E', '\x5', '\x1E', '\x170', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x5', '#', '\x194', '\n', '#', '\x3', '$', 
		'\x3', '$', '\x5', '$', '\x198', '\n', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\a', '\'', '\x1A8', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1AB', '\v', 
		'\'', '\x5', '\'', '\x1AD', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1B4', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x1BE', '\n', '+', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x1E2', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x1E5', '\v', '\x30', '\x5', '\x30', '\x1E7', 
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x1F4', '\n', '\x31', '\f', 
		'\x31', '\xE', '\x31', '\x1F7', '\v', '\x31', '\x5', '\x31', '\x1F9', 
		'\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', 
		'\x208', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x20B', '\v', '\x32', 
		'\x5', '\x32', '\x20D', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x216', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x21A', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x228', 
		'\n', '\x36', '\f', '\x36', '\xE', '\x36', '\x22B', '\v', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x230', '\n', '\x36', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x6', '\x38', '\x239', '\n', '\x38', '\r', 
		'\x38', '\xE', '\x38', '\x23A', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x23F', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', 
		'\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x2', '\x2', '\x46', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x2', '\n', '\x4', '\x2', '\xF', '\xF', '\x12', 
		'\x12', '\x3', '\x2', '\x37', '\x38', '\x3', '\x2', '.', '/', '\x6', '\x2', 
		' ', '\"', '\x30', '\x32', '\x35', '\x36', '\x43', '\x43', '\x3', '\x2', 
		'\x46', 'I', '\x3', '\x2', '\t', '\n', '\x3', '\x2', '>', '\x42', '\x5', 
		'\x2', '\x1B', '\x1B', '&', '&', '\x44', '\x45', '\x2', '\x268', '\x2', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x4', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x90', '\x3', '\x2', '\x2', '\x2', '\b', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xB2', '\x3', '\x2', '\x2', '\x2', '\f', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x12', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x16', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xFD', '\x3', '\x2', '\x2', '\x2', ' ', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x123', '\x3', '\x2', '\x2', '\x2', '&', '\x125', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x12E', '\x3', '\x2', '\x2', '\x2', '*', '\x131', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x30', '\x13F', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x142', '\x3', '\x2', '\x2', '\x2', '\x34', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x154', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x158', '\x3', '\x2', '\x2', '\x2', ':', '\x16F', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x171', '\x3', '\x2', '\x2', '\x2', '>', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x44', '\x193', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x197', '\x3', '\x2', '\x2', '\x2', 'H', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1A0', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1A2', '\x3', '\x2', '\x2', '\x2', 'N', '\x1B3', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1B5', '\x3', '\x2', '\x2', '\x2', 'R', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1BF', '\x3', '\x2', '\x2', '\x2', 'X', '\x1C6', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\\', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x62', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x66', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x223', '\x3', '\x2', '\x2', '\x2', 'l', '\x231', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x23E', '\x3', '\x2', '\x2', '\x2', 'p', '\x240', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x246', '\x3', '\x2', '\x2', '\x2', 
		't', '\x24C', '\x3', '\x2', '\x2', '\x2', 'v', '\x251', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x253', '\x3', '\x2', '\x2', '\x2', 'z', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x259', '\x3', '\x2', '\x2', '\x2', '\x80', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x84', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x263', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x6', 
		'\x4', '\x2', '\x8B', '\x8C', '\a', '\x2', '\x2', '\x3', '\x8C', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x34', '\x1B', '\x2', 
		'\x8E', '\x8F', '\a', '\x2', '\x2', '\x3', '\x8F', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x92', '\x5', '\b', '\x5', '\x2', '\x91', '\x93', 
		'\x5', '\x14', '\v', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x96', '\x5', '\x18', '\r', '\x2', '\x95', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x5', '&', '\x14', '\x2', 
		'\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', 
		'\x5', '\x32', '\x1A', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xA2', '\x5', ',', '\x17', '\x2', '\xA1', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', '\x5', '.', 
		'\x18', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA8', '\x5', '\x30', '\x19', '\x2', '\xA7', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x3', '\x2', '\x2', 
		'\xAA', '\xAF', '\x5', '\n', '\x6', '\x2', '\xAB', '\xAC', '\a', '=', 
		'\x2', '\x2', '\xAC', '\xAE', '\x5', '\n', '\x6', '\x2', '\xAD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\t', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x12', '\n', '\x2', 
		'\xB3', '\xB6', '\a', '\x5', '\x2', '\x2', '\xB4', '\xB7', '\x5', '\f', 
		'\a', '\x2', '\xB5', '\xB7', '\x5', 'H', '%', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\xE', '\b', 
		'\x2', '\xB9', '\xBA', '\a', '\b', '\x2', '\x2', '\xBA', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x5', '\x88', '\x45', '\x2', '\xBE', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x88', '\x45', '\x2', '\xC0', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x5', '\x34', '\x1B', 
		'\x2', '\xC2', '\xC3', '\a', '\x4', '\x2', '\x2', '\xC3', '\xC5', '\x5', 
		'\x12', '\n', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\a', '\x6', '\x2', '\x2', '\xC7', '\xC9', '\a', 
		'\a', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\x5', '\x88', '\x45', '\x2', '\xCB', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\v', '\x2', '\x2', '\xCD', 
		'\xD2', '\x5', '\x16', '\f', '\x2', '\xCE', '\xCF', '\a', '=', '\x2', 
		'\x2', '\xCF', '\xD1', '\x5', '\x16', '\f', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\x15', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x34', '\x1B', '\x2', '\xD6', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x1E', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x1F', '\x2', '\x2', '\xD9', '\xDA', '\x5', 
		'$', '\x13', '\x2', '\xDA', '\xDB', '\a', '\x4', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', '\x88', '\x45', '\x2', '\xDC', '\xDE', '\a', '\x6', '\x2', 
		'\x2', '\xDD', '\xDF', '\x5', '\x1A', '\xE', '\x2', '\xDE', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\a', '=', '\x2', 
		'\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE5', '\x5', '\x1E', '\x10', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE8', '\a', '=', '\x2', '\x2', '\xE7', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', '\x5', 
		' ', '\x11', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xED', '\a', ')', '\x2', '\x2', '\xED', '\xEE', '\a', 
		'\x39', '\x2', '\x2', '\xEE', '\xF3', '\x5', '\x1C', '\xF', '\x2', '\xEF', 
		'\xF0', '\a', '=', '\x2', '\x2', '\xF0', '\xF2', '\x5', '\x1C', '\xF', 
		'\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		':', '\x2', '\x2', '\xF7', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xFB', '\x5', '\x34', '\x1B', '\x2', '\xF9', '\xFA', '\a', '\x4', '\x2', 
		'\x2', '\xFA', '\xFC', '\x5', '\x12', '\n', '\x2', '\xFB', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '*', '\x2', 
		'\x2', '\xFE', '\xFF', '\a', '\x39', '\x2', '\x2', '\xFF', '\x104', '\x5', 
		'\"', '\x12', '\x2', '\x100', '\x101', '\a', '=', '\x2', '\x2', '\x101', 
		'\x103', '\x5', '\"', '\x12', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x108', '\a', ':', '\x2', '\x2', '\x108', 
		'\x109', '\a', '\x4', '\x2', '\x2', '\x109', '\x10A', '\x5', '\x12', '\n', 
		'\x2', '\x10A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', 
		'\a', '+', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x39', '\x2', '\x2', 
		'\x10D', '\x112', '\x5', '\"', '\x12', '\x2', '\x10E', '\x10F', '\a', 
		'=', '\x2', '\x2', '\x10F', '\x111', '\x5', '\"', '\x12', '\x2', '\x110', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x111', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', 
		':', '\x2', '\x2', '\x116', '\x117', '\a', '\x4', '\x2', '\x2', '\x117', 
		'\x118', '\x5', '\x12', '\n', '\x2', '\x118', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11C', '\x5', '\x34', '\x1B', '\x2', '\x11A', '\x11B', 
		'\a', '\x4', '\x2', '\x2', '\x11B', '\x11D', '\x5', '\x12', '\n', '\x2', 
		'\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x121', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11F', '\a', '\x6', '\x2', '\x2', '\x11F', '\x120', '\a', '-', '\x2', 
		'\x2', '\x120', '\x122', '\a', '\x43', '\x2', '\x2', '\x121', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '#', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x43', 
		'\x2', '\x2', '\x124', '%', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\a', '\f', '\x2', '\x2', '\x126', '\x12B', '\x5', '(', '\x15', '\x2', 
		'\x127', '\x128', '\a', '=', '\x2', '\x2', '\x128', '\x12A', '\x5', '(', 
		'\x15', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12F', '\x5', '\x34', '\x1B', '\x2', '\x12F', '\x130', '\x5', '*', '\x16', 
		'\x2', '\x130', ')', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\t', 
		'\x2', '\x2', '\x2', '\x132', '+', '\x3', '\x2', '\x2', '\x2', '\x133', 
		'\x134', '\a', '\r', '\x2', '\x2', '\x134', '\x139', '\x5', '\x34', '\x1B', 
		'\x2', '\x135', '\x136', '\a', '=', '\x2', '\x2', '\x136', '\x138', '\x5', 
		'\x34', '\x1B', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\a', '\x14', '\x2', '\x2', '\x13D', '\x13E', '\a', '.', '\x2', 
		'\x2', '\x13E', '/', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\a', 
		'\x15', '\x2', '\x2', '\x140', '\x141', '\a', '.', '\x2', '\x2', '\x141', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\a', '\x13', '\x2', 
		'\x2', '\x143', '\x148', '\x5', '\x34', '\x1B', '\x2', '\x144', '\x145', 
		'\a', '=', '\x2', '\x2', '\x145', '\x147', '\x5', '\x34', '\x1B', '\x2', 
		'\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x153', 
		'\x5', '\x44', '#', '\x2', '\x14C', '\x153', '\x5', '\x36', '\x1C', '\x2', 
		'\x14D', '\x153', '\x5', '\x38', '\x1D', '\x2', '\x14E', '\x153', '\x5', 
		':', '\x1E', '\x2', '\x14F', '\x153', '\x5', '<', '\x1F', '\x2', '\x150', 
		'\x153', '\x5', '>', ' ', '\x2', '\x151', '\x153', '\x5', '\x42', '\"', 
		'\x2', '\x152', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x152', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x152', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x155', '\x5', '\x44', '#', '\x2', '\x155', '\x156', 
		'\a', '$', '\x2', '\x2', '\x156', '\x157', '\x5', '\x84', '\x43', '\x2', 
		'\x157', '\x37', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x5', 
		'\x44', '#', '\x2', '\x159', '\x15A', '\a', '#', '\x2', '\x2', '\x15A', 
		'\x15B', '\x5', '\x82', '\x42', '\x2', '\x15B', '\x15C', '\a', '\t', '\x2', 
		'\x2', '\x15C', '\x15D', '\x5', '\x84', '\x43', '\x2', '\x15D', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x44', '#', '\x2', 
		'\x15F', '\x162', '\a', '\x5', '\x2', '\x2', '\x160', '\x163', '\x5', 
		'J', '&', '\x2', '\x161', '\x163', '\x5', 'j', '\x36', '\x2', '\x162', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x170', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\a', '\x39', '\x2', '\x2', '\x165', '\x166', '\x5', '\x34', '\x1B', '\x2', 
		'\x166', '\x167', '\a', '=', '\x2', '\x2', '\x167', '\x168', '\x5', '\x34', 
		'\x1B', '\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\a', ':', '\x2', '\x2', '\x16A', '\x16D', '\a', '\x5', '\x2', 
		'\x2', '\x16B', '\x16E', '\x5', 'J', '&', '\x2', '\x16C', '\x16E', '\x5', 
		'j', '\x36', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16C', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x16F', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x170', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\x5', '\x44', '#', '\x2', '\x172', '\x173', '\x5', 
		'\x86', '\x44', '\x2', '\x173', '\x174', '\x5', '\x84', '\x43', '\x2', 
		'\x174', '=', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x5', '\x44', 
		'#', '\x2', '\x176', '\x177', '\x5', '@', '!', '\x2', '\x177', '\x178', 
		'\x5', '\x84', '\x43', '\x2', '\x178', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x17A', '\t', '\x3', '\x2', '\x2', '\x17A', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x17B', '\x17C', '\a', '\x44', '\x2', '\x2', '\x17C', '\x17D', 
		'\a', '\x45', '\x2', '\x2', '\x17D', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x17E', '\x17F', '\a', '\x39', '\x2', '\x2', '\x17F', '\x180', '\x5', 
		'\x34', '\x1B', '\x2', '\x180', '\x181', '\a', ':', '\x2', '\x2', '\x181', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x182', '\x194', '\x5', 'L', '\'', 
		'\x2', '\x183', '\x194', '\x5', 'Z', '.', '\x2', '\x184', '\x194', '\x5', 
		'R', '*', '\x2', '\x185', '\x194', '\x5', 'p', '\x39', '\x2', '\x186', 
		'\x194', '\x5', '\\', '/', '\x2', '\x187', '\x194', '\x5', 'h', '\x35', 
		'\x2', '\x188', '\x194', '\x5', 'V', ',', '\x2', '\x189', '\x194', '\x5', 
		'X', '-', '\x2', '\x18A', '\x194', '\x5', 'r', ':', '\x2', '\x18B', '\x194', 
		'\x5', 't', ';', '\x2', '\x18C', '\x194', '\x5', '\x46', '$', '\x2', '\x18D', 
		'\x194', '\x5', '^', '\x30', '\x2', '\x18E', '\x194', '\x5', '`', '\x31', 
		'\x2', '\x18F', '\x194', '\x5', '\x62', '\x32', '\x2', '\x190', '\x194', 
		'\x5', 'J', '&', '\x2', '\x191', '\x194', '\x5', 'H', '%', '\x2', '\x192', 
		'\x194', '\x5', '~', '@', '\x2', '\x193', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x182', '\x3', '\x2', '\x2', '\x2', '\x193', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x185', '\x3', '\x2', '\x2', '\x2', '\x193', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x187', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'\x188', '\x3', '\x2', '\x2', '\x2', '\x193', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x193', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x193', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x193', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x198', '\x5', 'J', '&', '\x2', 
		'\x196', '\x198', '\x5', 'H', '%', '\x2', '\x197', '\x195', '\x3', '\x2', 
		'\x2', '\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', '\b', '\x2', '\x2', 
		'\x19A', '\x19B', '\x5', '\x88', '\x45', '\x2', '\x19B', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x19C', '\x19D', '\a', ';', '\x2', '\x2', '\x19D', '\x19E', 
		'\x5', '\x6', '\x4', '\x2', '\x19E', '\x19F', '\a', '<', '\x2', '\x2', 
		'\x19F', 'I', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '\x88', 
		'\x45', '\x2', '\x1A1', 'K', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x5', '\x88', '\x45', '\x2', '\x1A3', '\x1AC', '\a', '\x39', '\x2', '\x2', 
		'\x1A4', '\x1A9', '\x5', 'N', '(', '\x2', '\x1A5', '\x1A6', '\a', '=', 
		'\x2', '\x2', '\x1A6', '\x1A8', '\x5', 'N', '(', '\x2', '\x1A7', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\a', ':', '\x2', '\x2', 
		'\x1AF', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B4', '\x5', '\x34', 
		'\x1B', '\x2', '\x1B1', '\x1B4', '\x5', 'P', ')', '\x2', '\x1B2', '\x1B4', 
		'\a', '\x44', '\x2', '\x2', '\x1B3', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', 'O', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\t', '\x4', '\x2', '\x2', '\x1B6', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B8', '\a', '\x1A', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\a', '\x6', '\x2', '\x2', '\x1B9', '\x1BA', '\a', '\x1C', '\x2', '\x2', 
		'\x1BA', 'S', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BE', '\x5', 'J', 
		'&', '\x2', '\x1BC', '\x1BE', '\x5', 'Z', '.', '\x2', '\x1BD', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'\x1BE', 'U', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\x5', 'T', 
		'+', '\x2', '\x1C0', '\x1C1', '\a', '\b', '\x2', '\x2', '\x1C1', '\x1C2', 
		'\a', '%', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '\x39', '\x2', '\x2', 
		'\x1C3', '\x1C4', '\x5', '\x88', '\x45', '\x2', '\x1C4', '\x1C5', '\a', 
		':', '\x2', '\x2', '\x1C5', 'W', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\x5', 'V', ',', '\x2', '\x1C7', '\x1C8', '\a', '\b', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\a', '&', '\x2', '\x2', '\x1C9', '\x1CA', '\a', 
		'\x39', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', '\x88', '\x45', '\x2', 
		'\x1CB', '\x1CC', '\a', ':', '\x2', '\x2', '\x1CC', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD', '\x1CE', '\x5', 'J', '&', '\x2', '\x1CE', '\x1CF', 
		'\a', '\b', '\x2', '\x2', '\x1CF', '\x1D0', '\a', '\x1B', '\x2', '\x2', 
		'\x1D0', '\x1D1', '\a', '\x39', '\x2', '\x2', '\x1D1', '\x1D2', '\x5', 
		'\x88', '\x45', '\x2', '\x1D2', '\x1D3', '\a', '=', '\x2', '\x2', '\x1D3', 
		'\x1D4', '\x5', '\x88', '\x45', '\x2', '\x1D4', '\x1D5', '\a', ':', '\x2', 
		'\x2', '\x1D5', '[', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', 
		'\x34', '\x2', '\x2', '\x1D7', ']', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\x1D9', '\a', '\x17', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '\x39', '\x2', 
		'\x2', '\x1DA', '\x1DB', '\x5', '\x34', '\x1B', '\x2', '\x1DB', '\x1DC', 
		'\a', '=', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '\x16', '\x2', '\x2', 
		'\x1DD', '\x1E6', '\a', '\x39', '\x2', '\x2', '\x1DE', '\x1E3', '\x5', 
		'\x34', '\x1B', '\x2', '\x1DF', '\x1E0', '\a', '=', '\x2', '\x2', '\x1E0', 
		'\x1E2', '\x5', '\x34', '\x1B', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1E9', '\a', ':', '\x2', '\x2', '\x1E9', '\x1EA', '\a', 
		':', '\x2', '\x2', '\x1EA', '_', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1EC', '\a', '\x18', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x39', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\x5', '\x34', '\x1B', '\x2', '\x1EE', '\x1EF', 
		'\a', '=', '\x2', '\x2', '\x1EF', '\x1F8', '\a', '\x39', '\x2', '\x2', 
		'\x1F0', '\x1F5', '\x5', '\x16', '\f', '\x2', '\x1F1', '\x1F2', '\a', 
		'=', '\x2', '\x2', '\x1F2', '\x1F4', '\x5', '\x16', '\f', '\x2', '\x1F3', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F9', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F0', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\a', ':', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\a', ':', '\x2', '\x2', '\x1FC', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x1D', '\x2', '\x2', '\x1FE', 
		'\x1FF', '\a', '\x39', '\x2', '\x2', '\x1FF', '\x200', '\x5', '\x64', 
		'\x33', '\x2', '\x200', '\x201', '\a', '=', '\x2', '\x2', '\x201', '\x202', 
		'\a', '\r', '\x2', '\x2', '\x202', '\x203', '\a', '\xE', '\x2', '\x2', 
		'\x203', '\x20C', '\a', '\x39', '\x2', '\x2', '\x204', '\x209', '\x5', 
		'\x34', '\x1B', '\x2', '\x205', '\x206', '\a', '=', '\x2', '\x2', '\x206', 
		'\x208', '\x5', '\x34', '\x1B', '\x2', '\x207', '\x205', '\x3', '\x2', 
		'\x2', '\x2', '\x208', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x209', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x204', '\x3', '\x2', '\x2', '\x2', '\x20C', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x20E', '\x20F', '\a', ':', '\x2', '\x2', '\x20F', '\x210', '\a', 
		'=', '\x2', '\x2', '\x210', '\x215', '\a', '.', '\x2', '\x2', '\x211', 
		'\x212', '\a', '=', '\x2', '\x2', '\x212', '\x213', '\a', '\x10', '\x2', 
		'\x2', '\x213', '\x214', '\a', '\xE', '\x2', '\x2', '\x214', '\x216', 
		'\x5', '\x66', '\x34', '\x2', '\x215', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\x3', '\x2', '\x2', '\x2', '\x216', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x218', '\a', '=', '\x2', '\x2', '\x218', 
		'\x21A', '\a', '\x11', '\x2', '\x2', '\x219', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', ':', '\x2', '\x2', 
		'\x21C', '\x63', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\x5', 
		'\x34', '\x1B', '\x2', '\x21E', '\x65', '\x3', '\x2', '\x2', '\x2', '\x21F', 
		'\x220', '\x5', '\x34', '\x1B', '\x2', '\x220', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x222', '\t', '\x5', '\x2', '\x2', '\x222', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x223', '\x224', '\a', '\x39', '\x2', '\x2', '\x224', 
		'\x229', '\x5', 'n', '\x38', '\x2', '\x225', '\x226', '\a', '=', '\x2', 
		'\x2', '\x226', '\x228', '\x5', 'n', '\x38', '\x2', '\x227', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x22F', '\a', ':', '\x2', 
		'\x2', '\x22D', '\x22E', '\a', '\x19', '\x2', '\x2', '\x22E', '\x230', 
		'\x5', 'l', '\x37', '\x2', '\x22F', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', '\x230', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x231', '\x232', '\x5', '\x88', '\x45', '\x2', '\x232', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x233', '\x23F', '\x5', '\x34', '\x1B', 
		'\x2', '\x234', '\x235', '\a', '\x39', '\x2', '\x2', '\x235', '\x238', 
		'\x5', '\x34', '\x1B', '\x2', '\x236', '\x237', '\a', '=', '\x2', '\x2', 
		'\x237', '\x239', '\x5', '\x34', '\x1B', '\x2', '\x238', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x238', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', 
		'\a', ':', '\x2', '\x2', '\x23D', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x233', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x234', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', 'o', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\a', '\x39', '\x2', '\x2', '\x241', '\x242', '\x5', '\x82', 
		'\x42', '\x2', '\x242', '\x243', '\x5', 'v', '<', '\x2', '\x243', '\x244', 
		'\x5', '\x84', '\x43', '\x2', '\x244', '\x245', '\a', ':', '\x2', '\x2', 
		'\x245', 'q', '\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\a', '\x39', 
		'\x2', '\x2', '\x247', '\x248', '\x5', '\x82', '\x42', '\x2', '\x248', 
		'\x249', '\x5', 'x', '=', '\x2', '\x249', '\x24A', '\x5', '\x84', '\x43', 
		'\x2', '\x24A', '\x24B', '\a', ':', '\x2', '\x2', '\x24B', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x24D', '\a', ',', '\x2', '\x2', '\x24D', 
		'\x24E', '\a', '\x39', '\x2', '\x2', '\x24E', '\x24F', '\a', '\x43', '\x2', 
		'\x2', '\x24F', '\x250', '\a', ':', '\x2', '\x2', '\x250', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x251', '\x252', '\t', '\x6', '\x2', '\x2', '\x252', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\t', '\a', '\x2', 
		'\x2', '\x254', 'y', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\a', 
		'.', '\x2', '\x2', '\x256', '{', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x258', '\x5', '\x88', '\x45', '\x2', '\x258', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x259', '\x25A', '\a', '(', '\x2', '\x2', '\x25A', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x25B', '\x25C', '\a', '\x44', '\x2', '\x2', '\x25C', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x5', '\x34', '\x1B', 
		'\x2', '\x25E', '\x83', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', 
		'\x5', '\x34', '\x1B', '\x2', '\x260', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x262', '\t', '\b', '\x2', '\x2', '\x262', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x263', '\x264', '\t', '\t', '\x2', '\x2', '\x264', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x92', '\x97', '\x9B', '\x9E', '\xA1', 
		'\xA4', '\xA7', '\xAF', '\xB6', '\xBB', '\xC4', '\xC8', '\xD2', '\xDE', 
		'\xE1', '\xE4', '\xE7', '\xEA', '\xF3', '\xFB', '\x104', '\x112', '\x11C', 
		'\x121', '\x12B', '\x139', '\x148', '\x152', '\x162', '\x16D', '\x16F', 
		'\x193', '\x197', '\x1A9', '\x1AC', '\x1B3', '\x1BD', '\x1E3', '\x1E6', 
		'\x1F5', '\x1F8', '\x209', '\x20C', '\x215', '\x219', '\x229', '\x22F', 
		'\x23A', '\x23E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Packer2
