//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/antonio/source/repos/Packer/PBI_Expr_Antlr/pbiqParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Packer2 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class pbiqParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FROM=1, AS=2, IN=3, WITH=4, NATIVEREFERENCENAME=5, DOT=6, AND=7, OR=8, 
		NOT=9, WHERE=10, ORDERBY=11, ASCENDING=12, DESCENDING=13, SELECT=14, SKIP_=15, 
		TOP=16, USING=17, ANYVALUE=18, DEFAULTVALUEOVERRIDESANCESTORS=19, TRANSFORM=20, 
		VIA=21, NULL=22, TRUE=23, FALSE=24, BETWEEN=25, CONTAINS=26, AS_=27, INTEGER=28, 
		DECIMAL=29, DATE=30, DATETIMESECOND=31, DATETIME=32, SINGLE_QUOTE=33, 
		LPAREN=34, COMMA=35, RPAREN=36, GT=37, GTE=38, LT=39, LTE=40, EQ=41, STRING_LITERAL=42, 
		IDENTIFIER=43, BINARY_ARITHMETIC_OPERATOR=44, WS=45;
	public const int
		RULE_query = 0, RULE_from = 1, RULE_fromElement = 2, RULE_where = 3, RULE_queryFilter = 4, 
		RULE_alias = 5, RULE_entity = 6, RULE_entity_name = 7, RULE_schema = 8, 
		RULE_expressionContainer = 9, RULE_orderby = 10, RULE_groupby = 11, RULE_skip = 12, 
		RULE_top = 13, RULE_orderbySection = 14, RULE_direction = 15, RULE_algorithm = 16, 
		RULE_select = 17, RULE_expression = 18, RULE_nonPropertyExpression = 19, 
		RULE_nonFilterExpression = 20, RULE_filterExpression = 21, RULE_sourceRefExpr = 22, 
		RULE_aggregationExpr = 23, RULE_anyValueExpr = 24, RULE_andExpr = 25, 
		RULE_betweenExpr = 26, RULE_nullEpr = 27, RULE_intExpr = 28, RULE_decimalExpr = 29, 
		RULE_datetimeExpr = 30, RULE_dateExpr = 31, RULE_datetimeSecExpr = 32, 
		RULE_containsExpr = 33, RULE_stringExpr = 34, RULE_boolExp = 35, RULE_orExpr = 36, 
		RULE_comparisonExpr = 37, RULE_propertyExpression = 38, RULE_notExpr = 39, 
		RULE_literalExpr = 40, RULE_inExpr = 41, RULE_inExprValues = 42, RULE_expressionOrExpressionList = 43, 
		RULE_arithmenticExpr = 44, RULE_orderByClause = 45, RULE_tableName = 46, 
		RULE_equalityKind = 47, RULE_left = 48, RULE_right = 49, RULE_ubound = 50, 
		RULE_lbound = 51, RULE_operator = 52;
	public static readonly string[] ruleNames = {
		"query", "from", "fromElement", "where", "queryFilter", "alias", "entity", 
		"entity_name", "schema", "expressionContainer", "orderby", "groupby", 
		"skip", "top", "orderbySection", "direction", "algorithm", "select", "expression", 
		"nonPropertyExpression", "nonFilterExpression", "filterExpression", "sourceRefExpr", 
		"aggregationExpr", "anyValueExpr", "andExpr", "betweenExpr", "nullEpr", 
		"intExpr", "decimalExpr", "datetimeExpr", "dateExpr", "datetimeSecExpr", 
		"containsExpr", "stringExpr", "boolExp", "orExpr", "comparisonExpr", "propertyExpression", 
		"notExpr", "literalExpr", "inExpr", "inExprValues", "expressionOrExpressionList", 
		"arithmenticExpr", "orderByClause", "tableName", "equalityKind", "left", 
		"right", "ubound", "lbound", "operator"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "'''", "'('", "','", 
		"')'", "'>'", "'>='", "'<'", "'<='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FROM", "AS", "IN", "WITH", "NATIVEREFERENCENAME", "DOT", "AND", 
		"OR", "NOT", "WHERE", "ORDERBY", "ASCENDING", "DESCENDING", "SELECT", 
		"SKIP_", "TOP", "USING", "ANYVALUE", "DEFAULTVALUEOVERRIDESANCESTORS", 
		"TRANSFORM", "VIA", "NULL", "TRUE", "FALSE", "BETWEEN", "CONTAINS", "AS_", 
		"INTEGER", "DECIMAL", "DATE", "DATETIMESECOND", "DATETIME", "SINGLE_QUOTE", 
		"LPAREN", "COMMA", "RPAREN", "GT", "GTE", "LT", "LTE", "EQ", "STRING_LITERAL", 
		"IDENTIFIER", "BINARY_ARITHMETIC_OPERATOR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pbiqParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static pbiqParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pbiqParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pbiqParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(pbiqParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbyContext orderby() {
			return GetRuleContext<OrderbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupbyContext groupby() {
			return GetRuleContext<GroupbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipContext skip() {
			return GetRuleContext<SkipContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopContext top() {
			return GetRuleContext<TopContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			from();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 107;
				where();
				}
			}

			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 110;
				orderby();
				}
				break;
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SELECT) {
				{
				State = 113;
				select();
				}
			}

			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDERBY) {
				{
				State = 116;
				groupby();
				}
			}

			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP_) {
				{
				State = 119;
				skip();
				}
			}

			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 122;
				top();
				}
			}

			State = 125;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(pbiqParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromElementContext[] fromElement() {
			return GetRuleContexts<FromElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromElementContext fromElement(int i) {
			return GetRuleContext<FromElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(Context, State);
		EnterRule(_localctx, 2, RULE_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(FROM);
			State = 128;
			fromElement();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 129;
				Match(COMMA);
				State = 130;
				fromElement();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pbiqParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContainerContext expressionContainer() {
			return GetRuleContext<ExpressionContainerContext>(0);
		}
		public FromElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromElementContext fromElement() {
		FromElementContext _localctx = new FromElementContext(Context, State);
		EnterRule(_localctx, 4, RULE_fromElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			alias();
			State = 137;
			Match(IN);
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 138;
				entity();
				}
				break;
			case 2:
				{
				State = 139;
				expressionContainer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(pbiqParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryFilterContext[] queryFilter() {
			return GetRuleContexts<QueryFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryFilterContext queryFilter(int i) {
			return GetRuleContext<QueryFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 6, RULE_where);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(WHERE);
			State = 143;
			queryFilter();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 144;
				Match(COMMA);
				State = 145;
				queryFilter();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterExpressionContext filterExpression() {
			return GetRuleContext<FilterExpressionContext>(0);
		}
		public QueryFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryFilterContext queryFilter() {
		QueryFilterContext _localctx = new QueryFilterContext(Context, State);
		EnterRule(_localctx, 8, RULE_queryFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			filterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 10, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_nameContext entity_name() {
			return GetRuleContext<Entity_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaContext schema() {
			return GetRuleContext<SchemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 12, RULE_entity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 155;
				schema();
				State = 156;
				Match(DOT);
				}
				break;
			}
			State = 160;
			entity_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public Entity_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_nameContext entity_name() {
		Entity_nameContext _localctx = new Entity_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_entity_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 16, RULE_schema);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(pbiqParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIVEREFERENCENAME() { return GetToken(pbiqParser.NATIVEREFERENCENAME, 0); }
		public ExpressionContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionContainer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContainerContext expressionContainer() {
		ExpressionContainerContext _localctx = new ExpressionContainerContext(Context, State);
		EnterRule(_localctx, 18, RULE_expressionContainer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			expression();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 167;
				Match(AS);
				State = 168;
				alias();
				}
			}

			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 171;
				Match(WITH);
				State = 172;
				Match(NATIVEREFERENCENAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(pbiqParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderbySectionContext[] orderbySection() {
			return GetRuleContexts<OrderbySectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderbySectionContext orderbySection(int i) {
			return GetRuleContext<OrderbySectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public OrderbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyContext orderby() {
		OrderbyContext _localctx = new OrderbyContext(Context, State);
		EnterRule(_localctx, 20, RULE_orderby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(ORDERBY);
			State = 176;
			orderbySection();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 177;
				Match(COMMA);
				State = 178;
				orderbySection();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(pbiqParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public GroupbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupbyContext groupby() {
		GroupbyContext _localctx = new GroupbyContext(Context, State);
		EnterRule(_localctx, 22, RULE_groupby);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(ORDERBY);
			State = 185;
			expression();
			State = 186;
			direction();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 187;
				Match(COMMA);
				State = 188;
				expression();
				State = 189;
				direction();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(pbiqParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkip(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 24, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(SKIP_);
			State = 197;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(pbiqParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public TopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopContext top() {
		TopContext _localctx = new TopContext(Context, State);
		EnterRule(_localctx, 26, RULE_top);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(TOP);
			State = 200;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderbySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderbySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderbySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderbySectionContext orderbySection() {
		OrderbySectionContext _localctx = new OrderbySectionContext(Context, State);
		EnterRule(_localctx, 28, RULE_orderbySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			expression();
			State = 203;
			direction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCENDING() { return GetToken(pbiqParser.ASCENDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCENDING() { return GetToken(pbiqParser.DESCENDING, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 30, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_la = TokenStream.LA(1);
			if ( !(_la==ASCENDING || _la==DESCENDING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_algorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlgorithmContext algorithm() {
		AlgorithmContext _localctx = new AlgorithmContext(Context, State);
		EnterRule(_localctx, 32, RULE_algorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(pbiqParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 34, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(SELECT);
			State = 210;
			expression();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 211;
				Match(COMMA);
				State = 212;
				expression();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterExpressionContext filterExpression() {
			return GetRuleContext<FilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression() {
			return GetRuleContext<NonFilterExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				filterExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				nonFilterExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonPropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregationExprContext aggregationExpr() {
			return GetRuleContext<AggregationExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmenticExprContext arithmenticExpr() {
			return GetRuleContext<ArithmenticExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyValueExprContext anyValueExpr() {
			return GetRuleContext<AnyValueExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullEprContext nullEpr() {
			return GetRuleContext<NullEprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalExprContext decimalExpr() {
			return GetRuleContext<DecimalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeExprContext datetimeExpr() {
			return GetRuleContext<DatetimeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeSecExprContext datetimeSecExpr() {
			return GetRuleContext<DatetimeSecExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateExprContext dateExpr() {
			return GetRuleContext<DateExprContext>(0);
		}
		public NonPropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonPropertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonPropertyExpressionContext nonPropertyExpression() {
		NonPropertyExpressionContext _localctx = new NonPropertyExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_nonPropertyExpression);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				aggregationExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				arithmenticExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 224;
				anyValueExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 225;
				literalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 226;
				nullEpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 227;
				intExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 228;
				decimalExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 229;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 230;
				datetimeExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 231;
				sourceRefExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 232;
				datetimeSecExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 233;
				dateExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonFilterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregationExprContext aggregationExpr() {
			return GetRuleContext<AggregationExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmenticExprContext arithmenticExpr() {
			return GetRuleContext<ArithmenticExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyValueExprContext anyValueExpr() {
			return GetRuleContext<AnyValueExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralExprContext literalExpr() {
			return GetRuleContext<LiteralExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullEprContext nullEpr() {
			return GetRuleContext<NullEprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalExprContext decimalExpr() {
			return GetRuleContext<DecimalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExprContext stringExpr() {
			return GetRuleContext<StringExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeExprContext datetimeExpr() {
			return GetRuleContext<DatetimeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatetimeSecExprContext datetimeSecExpr() {
			return GetRuleContext<DatetimeSecExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DateExprContext dateExpr() {
			return GetRuleContext<DateExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceRefExprContext sourceRefExpr() {
			return GetRuleContext<SourceRefExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyExpressionContext propertyExpression() {
			return GetRuleContext<PropertyExpressionContext>(0);
		}
		public NonFilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonFilterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonFilterExpressionContext nonFilterExpression() {
		NonFilterExpressionContext _localctx = new NonFilterExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_nonFilterExpression);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				aggregationExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				arithmenticExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				anyValueExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239;
				literalExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 240;
				nullEpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241;
				intExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242;
				decimalExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 243;
				stringExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 244;
				datetimeExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 245;
				datetimeSecExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 246;
				dateExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 247;
				sourceRefExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 248;
				propertyExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExprContext andExpr() {
			return GetRuleContext<AndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrExprContext orExpr() {
			return GetRuleContext<OrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExprContext notExpr() {
			return GetRuleContext<NotExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BetweenExprContext betweenExpr() {
			return GetRuleContext<BetweenExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolExpContext boolExp() {
			return GetRuleContext<BoolExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InExprContext inExpr() {
			return GetRuleContext<InExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonExprContext comparisonExpr() {
			return GetRuleContext<ComparisonExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContainsExprContext containsExpr() {
			return GetRuleContext<ContainsExprContext>(0);
		}
		public FilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterExpressionContext filterExpression() {
		FilterExpressionContext _localctx = new FilterExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_filterExpression);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				andExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 253;
				orExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 254;
				notExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 255;
				betweenExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 256;
				boolExp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 257;
				inExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 258;
				comparisonExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 259;
				containsExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceRefExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public SourceRefExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceRefExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSourceRefExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SourceRefExprContext sourceRefExpr() {
		SourceRefExprContext _localctx = new SourceRefExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_sourceRefExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregationExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public AggregationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregationExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregationExprContext aggregationExpr() {
		AggregationExprContext _localctx = new AggregationExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_aggregationExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(IDENTIFIER);
			State = 265;
			Match(LPAREN);
			State = 266;
			expression();
			State = 267;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyValueExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANYVALUE() { return GetToken(pbiqParser.ANYVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(pbiqParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULTVALUEOVERRIDESANCESTORS() { return GetToken(pbiqParser.DEFAULTVALUEOVERRIDESANCESTORS, 0); }
		public AnyValueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyValueExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyValueExprContext anyValueExpr() {
		AnyValueExprContext _localctx = new AnyValueExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_anyValueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(ANYVALUE);
			State = 270;
			Match(WITH);
			State = 271;
			Match(DEFAULTVALUEOVERRIDESANCESTORS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pbiqParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public AndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExprContext andExpr() {
		AndExprContext _localctx = new AndExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_andExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(LPAREN);
			State = 274;
			left();
			State = 275;
			Match(AND);
			State = 276;
			right();
			State = 277;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BetweenExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression() {
			return GetRuleContext<NonFilterExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(pbiqParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UboundContext ubound() {
			return GetRuleContext<UboundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(pbiqParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LboundContext lbound() {
			return GetRuleContext<LboundContext>(0);
		}
		public BetweenExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_betweenExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BetweenExprContext betweenExpr() {
		BetweenExprContext _localctx = new BetweenExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_betweenExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			nonFilterExpression();
			State = 280;
			Match(BETWEEN);
			State = 281;
			ubound();
			State = 282;
			Match(AND);
			State = 283;
			lbound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullEprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(pbiqParser.NULL, 0); }
		public NullEprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullEpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullEpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullEprContext nullEpr() {
		NullEprContext _localctx = new NullEprContext(Context, State);
		EnterRule(_localctx, 54, RULE_nullEpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(pbiqParser.INTEGER, 0); }
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		IntExprContext _localctx = new IntExprContext(Context, State);
		EnterRule(_localctx, 56, RULE_intExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(pbiqParser.DECIMAL, 0); }
		public DecimalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalExprContext decimalExpr() {
		DecimalExprContext _localctx = new DecimalExprContext(Context, State);
		EnterRule(_localctx, 58, RULE_decimalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(pbiqParser.DATETIME, 0); }
		public DatetimeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetimeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetimeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeExprContext datetimeExpr() {
		DatetimeExprContext _localctx = new DatetimeExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_datetimeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(DATETIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(pbiqParser.DATE, 0); }
		public DateExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateExprContext dateExpr() {
		DateExprContext _localctx = new DateExprContext(Context, State);
		EnterRule(_localctx, 62, RULE_dateExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(DATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeSecExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIMESECOND() { return GetToken(pbiqParser.DATETIMESECOND, 0); }
		public DatetimeSecExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetimeSecExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetimeSecExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeSecExprContext datetimeSecExpr() {
		DatetimeSecExprContext _localctx = new DatetimeSecExprContext(Context, State);
		EnterRule(_localctx, 64, RULE_datetimeSecExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(DATETIMESECOND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContainsExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(pbiqParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public ContainsExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_containsExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainsExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContainsExprContext containsExpr() {
		ContainsExprContext _localctx = new ContainsExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_containsExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			left();
			State = 298;
			Match(CONTAINS);
			State = 299;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		public StringExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExprContext stringExpr() {
		StringExprContext _localctx = new StringExprContext(Context, State);
		EnterRule(_localctx, 68, RULE_stringExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(pbiqParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(pbiqParser.FALSE, 0); }
		public BoolExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExpContext boolExp() {
		BoolExpContext _localctx = new BoolExpContext(Context, State);
		EnterRule(_localctx, 70, RULE_boolExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(pbiqParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public OrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExprContext orExpr() {
		OrExprContext _localctx = new OrExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_orExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(LPAREN);
			State = 306;
			left();
			State = 307;
			Match(OR);
			State = 308;
			right();
			State = 309;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		public ComparisonExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExprContext comparisonExpr() {
		ComparisonExprContext _localctx = new ComparisonExprContext(Context, State);
		EnterRule(_localctx, 74, RULE_comparisonExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			left();
			State = 312;
			@operator();
			State = 313;
			right();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonPropertyExpressionContext nonPropertyExpression() {
			return GetRuleContext<NonPropertyExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(pbiqParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public PropertyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyExpressionContext propertyExpression() {
		PropertyExpressionContext _localctx = new PropertyExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_propertyExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			nonPropertyExpression();
			State = 316;
			Match(DOT);
			State = 317;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(pbiqParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public NotExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExprContext notExpr() {
		NotExprContext _localctx = new NotExprContext(Context, State);
		EnterRule(_localctx, 78, RULE_notExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(NOT);
			State = 320;
			Match(LPAREN);
			State = 321;
			expression();
			State = 322;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(pbiqParser.STRING_LITERAL, 0); }
		public LiteralExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralExprContext literalExpr() {
		LiteralExprContext _localctx = new LiteralExprContext(Context, State);
		EnterRule(_localctx, 80, RULE_literalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(pbiqParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext[] nonFilterExpression() {
			return GetRuleContexts<NonFilterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression(int i) {
			return GetRuleContext<NonFilterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InExprValuesContext inExprValues() {
			return GetRuleContext<InExprValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public InExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprContext inExpr() {
		InExprContext _localctx = new InExprContext(Context, State);
		EnterRule(_localctx, 82, RULE_inExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 326;
				nonFilterExpression();
				}
				break;
			case 2:
				{
				{
				State = 327;
				Match(LPAREN);
				State = 328;
				nonFilterExpression();
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 329;
					Match(COMMA);
					State = 330;
					nonFilterExpression();
					}
					}
					State = 335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 336;
				Match(RPAREN);
				}
				}
				break;
			}
			State = 340;
			Match(IN);
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 341;
				tableName();
				}
				break;
			case LPAREN:
				{
				State = 342;
				inExprValues();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExprValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrExpressionListContext[] expressionOrExpressionList() {
			return GetRuleContexts<ExpressionOrExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrExpressionListContext expressionOrExpressionList(int i) {
			return GetRuleContext<ExpressionOrExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(pbiqParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualityKindContext equalityKind() {
			return GetRuleContext<EqualityKindContext>(0);
		}
		public InExprValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExprValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExprValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExprValuesContext inExprValues() {
		InExprValuesContext _localctx = new InExprValuesContext(Context, State);
		EnterRule(_localctx, 84, RULE_inExprValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(LPAREN);
			State = 346;
			expressionOrExpressionList();
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 347;
				Match(COMMA);
				State = 348;
				expressionOrExpressionList();
				}
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 354;
			Match(RPAREN);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 355;
				Match(USING);
				State = 356;
				equalityKind();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(pbiqParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(pbiqParser.COMMA, i);
		}
		public ExpressionOrExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrExpressionListContext expressionOrExpressionList() {
		ExpressionOrExpressionListContext _localctx = new ExpressionOrExpressionListContext(Context, State);
		EnterRule(_localctx, 86, RULE_expressionOrExpressionList);
		int _la;
		try {
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				Match(LPAREN);
				State = 361;
				expression();
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 362;
					Match(COMMA);
					State = 363;
					expression();
					}
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 369;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmenticExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(pbiqParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeftContext left() {
			return GetRuleContext<LeftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_ARITHMETIC_OPERATOR() { return GetToken(pbiqParser.BINARY_ARITHMETIC_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RightContext right() {
			return GetRuleContext<RightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(pbiqParser.RPAREN, 0); }
		public ArithmenticExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmenticExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmenticExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmenticExprContext arithmenticExpr() {
		ArithmenticExprContext _localctx = new ArithmenticExprContext(Context, State);
		EnterRule(_localctx, 88, RULE_arithmenticExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(LPAREN);
			State = 374;
			left();
			State = 375;
			Match(BINARY_ARITHMETIC_OPERATOR);
			State = 376;
			right();
			State = 377;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDERBY() { return GetToken(pbiqParser.ORDERBY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_orderByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			Match(ORDERBY);
			State = 380;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 92, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityKindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pbiqParser.IDENTIFIER, 0); }
		public EqualityKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityKindContext equalityKind() {
		EqualityKindContext _localctx = new EqualityKindContext(Context, State);
		EnterRule(_localctx, 94, RULE_equalityKind);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression() {
			return GetRuleContext<NonFilterExpressionContext>(0);
		}
		public LeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftContext left() {
		LeftContext _localctx = new LeftContext(Context, State);
		EnterRule(_localctx, 96, RULE_left);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			nonFilterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression() {
			return GetRuleContext<NonFilterExpressionContext>(0);
		}
		public RightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RightContext right() {
		RightContext _localctx = new RightContext(Context, State);
		EnterRule(_localctx, 98, RULE_right);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			nonFilterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression() {
			return GetRuleContext<NonFilterExpressionContext>(0);
		}
		public UboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ubound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUbound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UboundContext ubound() {
		UboundContext _localctx = new UboundContext(Context, State);
		EnterRule(_localctx, 100, RULE_ubound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			nonFilterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LboundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonFilterExpressionContext nonFilterExpression() {
			return GetRuleContext<NonFilterExpressionContext>(0);
		}
		public LboundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lbound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLbound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LboundContext lbound() {
		LboundContext _localctx = new LboundContext(Context, State);
		EnterRule(_localctx, 102, RULE_lbound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			nonFilterExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(pbiqParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(pbiqParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(pbiqParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(pbiqParser.GTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(pbiqParser.LTE, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpbiqParserVisitor<TResult> typedVisitor = visitor as IpbiqParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 104, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4260607557632L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,45,397,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,1,0,1,0,3,0,109,8,0,1,0,3,0,112,8,0,1,0,
		3,0,115,8,0,1,0,3,0,118,8,0,1,0,3,0,121,8,0,1,0,3,0,124,8,0,1,0,1,0,1,
		1,1,1,1,1,1,1,5,1,132,8,1,10,1,12,1,135,9,1,1,2,1,2,1,2,1,2,3,2,141,8,
		2,1,3,1,3,1,3,1,3,5,3,147,8,3,10,3,12,3,150,9,3,1,4,1,4,1,5,1,5,1,6,1,
		6,1,6,3,6,159,8,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,3,9,170,8,9,1,9,
		1,9,3,9,174,8,9,1,10,1,10,1,10,1,10,5,10,180,8,10,10,10,12,10,183,9,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,192,8,11,10,11,12,11,195,9,11,
		1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
		1,17,1,17,1,17,5,17,214,8,17,10,17,12,17,217,9,17,1,18,1,18,3,18,221,8,
		18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,235,
		8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		3,20,250,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,261,8,
		21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,
		25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,
		29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,
		35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,
		38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,
		41,332,8,41,10,41,12,41,335,9,41,1,41,1,41,3,41,339,8,41,1,41,1,41,1,41,
		3,41,344,8,41,1,42,1,42,1,42,1,42,5,42,350,8,42,10,42,12,42,353,9,42,1,
		42,1,42,1,42,3,42,358,8,42,1,43,1,43,1,43,1,43,1,43,5,43,365,8,43,10,43,
		12,43,368,9,43,1,43,1,43,3,43,372,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,
		45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,
		51,1,52,1,52,1,52,0,0,53,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,0,3,1,0,12,13,1,0,23,24,1,0,37,
		41,397,0,106,1,0,0,0,2,127,1,0,0,0,4,136,1,0,0,0,6,142,1,0,0,0,8,151,1,
		0,0,0,10,153,1,0,0,0,12,158,1,0,0,0,14,162,1,0,0,0,16,164,1,0,0,0,18,166,
		1,0,0,0,20,175,1,0,0,0,22,184,1,0,0,0,24,196,1,0,0,0,26,199,1,0,0,0,28,
		202,1,0,0,0,30,205,1,0,0,0,32,207,1,0,0,0,34,209,1,0,0,0,36,220,1,0,0,
		0,38,234,1,0,0,0,40,249,1,0,0,0,42,260,1,0,0,0,44,262,1,0,0,0,46,264,1,
		0,0,0,48,269,1,0,0,0,50,273,1,0,0,0,52,279,1,0,0,0,54,285,1,0,0,0,56,287,
		1,0,0,0,58,289,1,0,0,0,60,291,1,0,0,0,62,293,1,0,0,0,64,295,1,0,0,0,66,
		297,1,0,0,0,68,301,1,0,0,0,70,303,1,0,0,0,72,305,1,0,0,0,74,311,1,0,0,
		0,76,315,1,0,0,0,78,319,1,0,0,0,80,324,1,0,0,0,82,338,1,0,0,0,84,345,1,
		0,0,0,86,371,1,0,0,0,88,373,1,0,0,0,90,379,1,0,0,0,92,382,1,0,0,0,94,384,
		1,0,0,0,96,386,1,0,0,0,98,388,1,0,0,0,100,390,1,0,0,0,102,392,1,0,0,0,
		104,394,1,0,0,0,106,108,3,2,1,0,107,109,3,6,3,0,108,107,1,0,0,0,108,109,
		1,0,0,0,109,111,1,0,0,0,110,112,3,20,10,0,111,110,1,0,0,0,111,112,1,0,
		0,0,112,114,1,0,0,0,113,115,3,34,17,0,114,113,1,0,0,0,114,115,1,0,0,0,
		115,117,1,0,0,0,116,118,3,22,11,0,117,116,1,0,0,0,117,118,1,0,0,0,118,
		120,1,0,0,0,119,121,3,24,12,0,120,119,1,0,0,0,120,121,1,0,0,0,121,123,
		1,0,0,0,122,124,3,26,13,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,
		0,0,125,126,5,0,0,1,126,1,1,0,0,0,127,128,5,1,0,0,128,133,3,4,2,0,129,
		130,5,35,0,0,130,132,3,4,2,0,131,129,1,0,0,0,132,135,1,0,0,0,133,131,1,
		0,0,0,133,134,1,0,0,0,134,3,1,0,0,0,135,133,1,0,0,0,136,137,3,10,5,0,137,
		140,5,3,0,0,138,141,3,12,6,0,139,141,3,18,9,0,140,138,1,0,0,0,140,139,
		1,0,0,0,141,5,1,0,0,0,142,143,5,10,0,0,143,148,3,8,4,0,144,145,5,35,0,
		0,145,147,3,8,4,0,146,144,1,0,0,0,147,150,1,0,0,0,148,146,1,0,0,0,148,
		149,1,0,0,0,149,7,1,0,0,0,150,148,1,0,0,0,151,152,3,42,21,0,152,9,1,0,
		0,0,153,154,5,43,0,0,154,11,1,0,0,0,155,156,3,16,8,0,156,157,5,6,0,0,157,
		159,1,0,0,0,158,155,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,3,
		14,7,0,161,13,1,0,0,0,162,163,5,43,0,0,163,15,1,0,0,0,164,165,5,43,0,0,
		165,17,1,0,0,0,166,169,3,36,18,0,167,168,5,2,0,0,168,170,3,10,5,0,169,
		167,1,0,0,0,169,170,1,0,0,0,170,173,1,0,0,0,171,172,5,4,0,0,172,174,5,
		5,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,19,1,0,0,0,175,176,5,11,0,0,
		176,181,3,28,14,0,177,178,5,35,0,0,178,180,3,28,14,0,179,177,1,0,0,0,180,
		183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,21,1,0,0,0,183,181,1,0,
		0,0,184,185,5,11,0,0,185,186,3,36,18,0,186,193,3,30,15,0,187,188,5,35,
		0,0,188,189,3,36,18,0,189,190,3,30,15,0,190,192,1,0,0,0,191,187,1,0,0,
		0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,23,1,0,0,0,195,193,
		1,0,0,0,196,197,5,15,0,0,197,198,5,28,0,0,198,25,1,0,0,0,199,200,5,16,
		0,0,200,201,5,28,0,0,201,27,1,0,0,0,202,203,3,36,18,0,203,204,3,30,15,
		0,204,29,1,0,0,0,205,206,7,0,0,0,206,31,1,0,0,0,207,208,5,43,0,0,208,33,
		1,0,0,0,209,210,5,14,0,0,210,215,3,36,18,0,211,212,5,35,0,0,212,214,3,
		36,18,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,
		0,216,35,1,0,0,0,217,215,1,0,0,0,218,221,3,42,21,0,219,221,3,40,20,0,220,
		218,1,0,0,0,220,219,1,0,0,0,221,37,1,0,0,0,222,235,3,46,23,0,223,235,3,
		88,44,0,224,235,3,48,24,0,225,235,3,80,40,0,226,235,3,54,27,0,227,235,
		3,56,28,0,228,235,3,58,29,0,229,235,3,68,34,0,230,235,3,60,30,0,231,235,
		3,44,22,0,232,235,3,64,32,0,233,235,3,62,31,0,234,222,1,0,0,0,234,223,
		1,0,0,0,234,224,1,0,0,0,234,225,1,0,0,0,234,226,1,0,0,0,234,227,1,0,0,
		0,234,228,1,0,0,0,234,229,1,0,0,0,234,230,1,0,0,0,234,231,1,0,0,0,234,
		232,1,0,0,0,234,233,1,0,0,0,235,39,1,0,0,0,236,250,3,46,23,0,237,250,3,
		88,44,0,238,250,3,48,24,0,239,250,3,80,40,0,240,250,3,54,27,0,241,250,
		3,56,28,0,242,250,3,58,29,0,243,250,3,68,34,0,244,250,3,60,30,0,245,250,
		3,64,32,0,246,250,3,62,31,0,247,250,3,44,22,0,248,250,3,76,38,0,249,236,
		1,0,0,0,249,237,1,0,0,0,249,238,1,0,0,0,249,239,1,0,0,0,249,240,1,0,0,
		0,249,241,1,0,0,0,249,242,1,0,0,0,249,243,1,0,0,0,249,244,1,0,0,0,249,
		245,1,0,0,0,249,246,1,0,0,0,249,247,1,0,0,0,249,248,1,0,0,0,250,41,1,0,
		0,0,251,261,1,0,0,0,252,261,3,50,25,0,253,261,3,72,36,0,254,261,3,78,39,
		0,255,261,3,52,26,0,256,261,3,70,35,0,257,261,3,82,41,0,258,261,3,74,37,
		0,259,261,3,66,33,0,260,251,1,0,0,0,260,252,1,0,0,0,260,253,1,0,0,0,260,
		254,1,0,0,0,260,255,1,0,0,0,260,256,1,0,0,0,260,257,1,0,0,0,260,258,1,
		0,0,0,260,259,1,0,0,0,261,43,1,0,0,0,262,263,5,43,0,0,263,45,1,0,0,0,264,
		265,5,43,0,0,265,266,5,34,0,0,266,267,3,36,18,0,267,268,5,36,0,0,268,47,
		1,0,0,0,269,270,5,18,0,0,270,271,5,4,0,0,271,272,5,19,0,0,272,49,1,0,0,
		0,273,274,5,34,0,0,274,275,3,96,48,0,275,276,5,7,0,0,276,277,3,98,49,0,
		277,278,5,36,0,0,278,51,1,0,0,0,279,280,3,40,20,0,280,281,5,25,0,0,281,
		282,3,100,50,0,282,283,5,7,0,0,283,284,3,102,51,0,284,53,1,0,0,0,285,286,
		5,22,0,0,286,55,1,0,0,0,287,288,5,28,0,0,288,57,1,0,0,0,289,290,5,29,0,
		0,290,59,1,0,0,0,291,292,5,32,0,0,292,61,1,0,0,0,293,294,5,30,0,0,294,
		63,1,0,0,0,295,296,5,31,0,0,296,65,1,0,0,0,297,298,3,96,48,0,298,299,5,
		26,0,0,299,300,3,98,49,0,300,67,1,0,0,0,301,302,5,42,0,0,302,69,1,0,0,
		0,303,304,7,1,0,0,304,71,1,0,0,0,305,306,5,34,0,0,306,307,3,96,48,0,307,
		308,5,8,0,0,308,309,3,98,49,0,309,310,5,36,0,0,310,73,1,0,0,0,311,312,
		3,96,48,0,312,313,3,104,52,0,313,314,3,98,49,0,314,75,1,0,0,0,315,316,
		3,38,19,0,316,317,5,6,0,0,317,318,5,43,0,0,318,77,1,0,0,0,319,320,5,9,
		0,0,320,321,5,34,0,0,321,322,3,36,18,0,322,323,5,36,0,0,323,79,1,0,0,0,
		324,325,5,42,0,0,325,81,1,0,0,0,326,339,3,40,20,0,327,328,5,34,0,0,328,
		333,3,40,20,0,329,330,5,35,0,0,330,332,3,40,20,0,331,329,1,0,0,0,332,335,
		1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,
		0,336,337,5,36,0,0,337,339,1,0,0,0,338,326,1,0,0,0,338,327,1,0,0,0,339,
		340,1,0,0,0,340,343,5,3,0,0,341,344,3,92,46,0,342,344,3,84,42,0,343,341,
		1,0,0,0,343,342,1,0,0,0,344,83,1,0,0,0,345,346,5,34,0,0,346,351,3,86,43,
		0,347,348,5,35,0,0,348,350,3,86,43,0,349,347,1,0,0,0,350,353,1,0,0,0,351,
		349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,351,1,0,0,0,354,357,5,
		36,0,0,355,356,5,17,0,0,356,358,3,94,47,0,357,355,1,0,0,0,357,358,1,0,
		0,0,358,85,1,0,0,0,359,372,3,36,18,0,360,361,5,34,0,0,361,366,3,36,18,
		0,362,363,5,35,0,0,363,365,3,36,18,0,364,362,1,0,0,0,365,368,1,0,0,0,366,
		364,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,5,
		36,0,0,370,372,1,0,0,0,371,359,1,0,0,0,371,360,1,0,0,0,372,87,1,0,0,0,
		373,374,5,34,0,0,374,375,3,96,48,0,375,376,5,44,0,0,376,377,3,98,49,0,
		377,378,5,36,0,0,378,89,1,0,0,0,379,380,5,11,0,0,380,381,3,36,18,0,381,
		91,1,0,0,0,382,383,5,43,0,0,383,93,1,0,0,0,384,385,5,43,0,0,385,95,1,0,
		0,0,386,387,3,40,20,0,387,97,1,0,0,0,388,389,3,40,20,0,389,99,1,0,0,0,
		390,391,3,40,20,0,391,101,1,0,0,0,392,393,3,40,20,0,393,103,1,0,0,0,394,
		395,7,2,0,0,395,105,1,0,0,0,26,108,111,114,117,120,123,133,140,148,158,
		169,173,181,193,215,220,234,249,260,333,338,343,351,357,366,371
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Packer2
